/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

var ga = {};
ga.tmp = {};

ga.fielderrors = 0;

// extend jstree for singleselect & conditional select plugins:

(function ($, undefined) {
  "use strict";
  $.jstree.defaults.conditionalselect = function () { return true; };
  $.jstree.plugins.conditionalselect = function (options, parent) {
    this.activate_node = function (obj, e) {
      if(this.settings.conditionalselect.call(this, this.get_node(obj))) {
        parent.activate_node.call(this, obj, e);
      }
    };
  };
  $.jstree.plugins.singleselect = function (options, parent) {
    this.activate_node = function (obj, e) {
      if(this.is_leaf( obj )) {
        parent.activate_node.call(this, obj, e);
      }
    };
  };
  $.jstree.plugins.selectonlyleaf = function (options, parent) {
    this.activate_node = function (obj, e) {
      if(this.is_leaf( obj )) {
        parent.activate_node.call(this, obj, e);
      }
    };
  };
  $.jstree.plugins.singleselectpath = function (options, parent) {
    this.activate_node = function (obj, e) {
      if(!this.is_leaf( obj )) {
        parent.activate_node.call(this, obj, e);
      }
    };
  };
  $.jstree.plugins.selectnoleaf = function (options, parent) {
    this.activate_node = function (obj, e) {
      if(!this.is_leaf( obj )) {
        parent.activate_node.call(this, obj, e);
      }
    };
  };
  $.jstree.defaults.sort = function (a,b) {
      return this.get_node( a ).data.time < this.get_node( b ).data.time ? 1 : -1;
  };
})(jQuery);

RegExp.quote = function(str) {
   return str.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
};

Object.size = function(obj) {

    var size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) size++;
    }

    return size;
};


ga.set = function( param, value ) {
    if ( value ) {
        ga.set.data[ param ] = value;
    }
    return ga.set.data[ param ];
}

ga.set.data = {};

ga.restricted = {};

ga.restricted.add = function( group, menu ) {
    
    ga.restricted.ids[ group ] = ga.restricted.ids[ group ] || []; 
    ga.restricted.ids[ group ].push( menu );
}

ga.restricted.hideall = function() {
    var i;
    
    ga.restricted.data = {};
    for ( i in ga.restricted.ids ) {
        
        $( ga.restricted.ids[ i ].join() ).hide();
    }
}

ga.restricted.show = function( restricted ) {
    var i;
    
    for ( i in restricted ) {
        ga.restricted.data[ restricted[ i ] ] = 1;
        if ( ga.restricted.ids[ restricted[ i ] ] ) {
            $( ga.restricted.ids[ restricted[ i ] ].join() ).show();
        }
    }
}

ga.specproj = function( id,  value ) {
    
    var t = {};
    t.id = id;
    t.value = value;
    ga.specproj.data.push( t );
}
    
ga.specproj.data = [];

ga.specproj.clear = function() {
    
    ga.specproj.data = [];
}

ga.specproj.gname = function() {
    var i, add, name = "", tval;
    
    
    for ( i in ga.specproj.data ) {
        if ( ga.specproj.data.hasOwnProperty( i ) ) {
            tval = $( ga.specproj.data[ i ].value ).val();
            if ( tval == parseFloat( tval ) ) {
                tval = parseFloat( tval );
            }
            add = ga.specproj.data[ i ].id + tval;
            name += add.replace( /[^A-z0-9.-]+/g, "_" );
            
        }
    }
    return name;
}
        
ga.urlparams = function( sParam ) {
    var sURLVariables = window.location.search.substring(1).split('&');
    for (var i = 0; i < sURLVariables.length; i++) {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam) {
            return sParameterName[1];
        }
    }
}

ga.frontpage = function( url ) {
    $( 'html' ).load( url );
}

ga.loader = function( jqtag, delay ) {
    
    ga.loader.jqtag = jqtag;
    ga.loader.delay = delay;
};

ga.loader.timeout = null;

ga.loader.startshow = function() {
    
    if ( ga.loader.timeout ) {
        clearTimeout( ga.loader.timeout );
        ga.loader.timeout = null;
        $( ga.loader.jqtag ).show();
    } else {
        
        $( ga.loader.jqtag ).hide();
    }
}

ga.loader.hide = function() {
    
    if ( ga.loader.timeout ) {
        clearTimeout( ga.loader.timeout );
        ga.loader.timeout = null;
    }
    
    $( ga.loader.jqtag ).hide();
}

ga.loader.show = function() {
    
    if ( ga.loader.timeout ) {
        clearTimeout( ga.loader.timeout );
    }
    ga.loader.timeout = setTimeout( ga.loader.startshow(), ga.loader.delay );
}

ga.menumodules = [];

// group

ga.group = {};

ga.group.set = function( data ) {
    
    ga.group.all = data;
}

ga.group.setuser = function( data ) {
    
    var k;
    ga.group.user = data;
    ga.group.userhas = {};
    for ( k in ga.group.user ) {
        ga.group.userhas[ ga.group.user[ k ] ] = 1;
    }
    ga.group.show();
}

ga.group.inputhtml = function( tag ) {
    
    var result = "",
        k,
        id;

    ga.group.activeids = {};

    if ( !ga.group.all ) {
        return result;
    }

    // loop thru available group and create cbs for each group

    for ( k in ga.group.all ) {
        if ( ga.group.all[k][ "userconfig" ] ) {
            id = "_setgroup_" + tag + "_" + k;
            
            result += 
            '<tr><td><label for="' + id + '" class="highlight">'
                + ( ga.group.all[k]["label"] ? ga.group.all[k]["label"] : k )
                + '</label></td><td><input type="checkbox" name="' + id + '" id="' + id + '"'
                + ( ga.group.userhas[k] ? ' checked' : '' )
                + ( ga.group.all[k]["help"] ? ' class="help_link"><span class="help">' + ga.group.all[k]["help"] + '</span' : '' )
                + '></td></tr>'
            ;
            ga.group.activeids[ k ] = id;
        }
    }
    

    return result;
}        

ga.group.addmenu = function( group, menu ) {
    
    ga.group.menuids[ group ] = ga.group.menuids[ group ] || []; 
    ga.group.menuids[ group ].push( menu );
}

ga.group.hideall = function() {
    var i;
    
    for ( i in ga.group.menuids ) {
        
        $( ga.group.menuids[ i ].join() ).hide();
    }
}

ga.group.show = function() {
    var i;
    
    ga.group.hideall();
    for ( i in ga.group.userhas ) {
        
        if ( ga.group.menuids[ i ] ) {
            
            $( ga.group.menuids[ i ].join() ).show();
        }
    }
    if ( ga.group.menuids[ "login" ] ) {
        
        $( ga.group.menuids[ "login" ].join() ).show();
    }
}

ga.browser = function() {
    var sUsrAg = navigator.userAgent;

    ga.browser.type     = "unknown";
    ga.browser.prefix   = "";
    ga.browser.gradient = false;
    ga.browser.clrpkr   = false;

    if(sUsrAg.indexOf("Chrome") > -1) {
        ga.browser.type     = "chrome";
        ga.browser.prefix   = "-webkit-";
        ga.browser.gradient = true;
        ga.browser.clrpkr   = true;
    } else if (sUsrAg.indexOf("Safari") > -1) {
        ga.browser.type = "safari";
        ga.browser.prefix   = "-webkit-";
        ga.browser.gradient = true;
    } else if (sUsrAg.indexOf("Opera") > -1) {
        ga.browser.type = "opera";
        ga.browser.prefix   = "-o-";
        ga.browser.gradient = true;
        ga.browser.clrpkr   = true;
    } else if (sUsrAg.indexOf("Firefox") > -1) {
        ga.browser.type = "mozilla";
        ga.browser.prefix   = "-moz-";
        ga.browser.gradient = true;
        ga.browser.clrpkr   = true;
    } else if (sUsrAg.indexOf("MSIE") > -1) {
        ga.browser.type = "msie";
        ga.browser.prefix   = "";
        ga.browser.gradient = true;
    }
    
}

ga.cssrule = {};

ga.cssrule.get = function (ruleName, deleteFlag) {               // Return requested style obejct
   ruleName=ruleName.toLowerCase();                       // Convert test string to lower case.
   if (document.styleSheets) {                            // If browser can play with stylesheets
      for (var i=0; i<document.styleSheets.length; i++) { // For each stylesheet
         var styleSheet=document.styleSheets[i];          // Get the current Stylesheet
         var ii=0;                                        // Initialize subCounter.
         var cssRule=false;                               // Initialize cssRule. 
         do {                                             // For each rule in stylesheet
            if (styleSheet.cssRules) {                    // Browser uses cssRules?
               cssRule = styleSheet.cssRules[ii];         // Yes --Mozilla Style
            } else {                                      // Browser usses rules?
               cssRule = styleSheet.rules[ii];            // Yes IE style. 
            }                                             // End IE check.
            if (cssRule)  {                               // If we found a rule...
               if (cssRule.selectorText &&
                   cssRule.selectorText.toLowerCase()==ruleName) { //  match ruleName?
                  if (deleteFlag=='delete') {             // Yes.  Are we deleteing?
                     if (styleSheet.cssRules) {           // Yes, deleting...
                        styleSheet.deleteRule(ii);        // Delete rule, Moz Style
                     } else {                             // Still deleting.
                        styleSheet.removeRule(ii);        // Delete rule IE style.
                     }                                    // End IE check.
                     return true;                         // return true, class deleted.
                  } else {                                // found and not deleting.
                     return cssRule;                      // return the style object.
                  }                                       // End delete Check
               }                                          // End found rule name
            }                                             // end found cssRule
            ii++;                                         // Increment sub-counter
         } while (cssRule)                                // end While loop
      }                                                   // end For loop
   }                                                      // end styleSheet ability check
   return false;                                          // we found NOTHING!
}                                                         // end getCSSRule 

ga.cssrule.kill = function (ruleName) {                          // Delete a CSS rule   
   return ga.cssrule.get(ruleName,'delete');                  // just call getCSSRule w/delete flag.
}                                                         // end killCSSRule

ga.cssrule.add = function (ruleName) {                           // Create a new css rule
   if (document.styleSheets) {                            // Can browser do styleSheets?
      if (!ga.cssrule.get(ruleName)) {                        // if rule doesn't exist...
         if (document.styleSheets[0].addRule) {           // Browser is IE?
            document.styleSheets[0].addRule(ruleName, null,0);      // Yes, add IE style
         } else {                                         // Browser is IE?
            document.styleSheets[0].insertRule(ruleName+' { }', 0); // Yes, add Moz style.
         }                                                // End browser check
      }                                                   // End already exist check.
   }                                                      // End browser ability check.
   return ga.cssrule.get(ruleName);                           // return rule we just created.
} 

ga.cache = {};

ga.cache.msg = function( cachefound, cachedelete, cb_get_results, cb_do_submit, uuid, $form, airavataresource ) {
    

    switch( cachefound ) {
    case "notify" : 
        {               
            if ( ga.restricted.data[ cachedelete ] ) {
                messagebox( {
                    icon  : "question.png"
                    ,text  : "Show or clear previously computed results."
                    ,buttons : [
                        { 
                            id    : "showcached"
                            ,label : "Show previously computed results"
                            ,cb    : cb_get_results
                            ,adata  : [ uuid, 0, 1, 1 ]
                        }
                        ,{ 
                            id    : "clear"
                            ,label : "Clear cached result"
                            ,cb    : ga.cache.clear
                            ,adata  : [ uuid, cachedelete ]
                        }
                        ,{
                            id    : "cancel",
                            label : "Cancel"
                        }
                    ]
                } );
                return;
            } else {
                messagebox( { icon:"information.png", text:"Showing previously computed results." } );
            }
        }
        break;
    case "askrecompute" : 
        if ( ga.restricted.data[ cachedelete ] ) {
            messagebox( {
                icon  : "question.png"
                ,text  : "Previously computed results are available."
                ,buttons : [
                    { 
                        id    : "showcached"
                        ,label : "Show previously computed results"
                        ,cb    : cb_get_results
                        ,adata  : [ uuid, 0, 1, 1 ]
                    }
                    ,{ 
                        id    : "recompute"
                        ,label : "Recompute results"
                        ,cb    : cb_do_submit
                        ,adata  : [ $form, airavataresource, 1 ]
                    }
                    ,{ 
                        id    : "clear"
                        ,label : "Clear cached result"
                        ,cb    : ga.cache.clear
                        ,adata  : [ uuid, cachedelete ]
                    }
                    ,{
                        id    : "cancel",
                        label : "Cancel"
                    }
                ]
            } );
        } else {
            messagebox( {
                icon  : "question.png"
                ,text  : "Previously computed results are available."
                ,buttons : [
                    { id    : "showcached"
                      ,label : "Show previously computed results"
                      ,cb    : cb_get_results
                      ,adata  : [ uuid, 0, 1, 1 ]
                    }
                    ,{ id    : "recompute"
                       ,label : "Recompute results"
                       ,cb    : cb_do_submit
                       ,adata  : [ $form, airavataresource, 1 ]
                     }
                    ,{ id    : "cancel",
                       label : "Cancel"
                     }
                ]
            } );
        }
        return;
        break;
    default: 
        {               
            if ( ga.restricted.data[ cachedelete ] ) {
                messagebox( {
                    icon  : "question.png"
                    ,text  : "Show or clear previously computed results."
                    ,buttons : [
                        { 
                            id    : "showcached"
                            ,label : "Show previously computed results"
                            ,cb    : cb_get_results
                            ,adata  : [ uuid, 0, 1, 1 ]
                        }
                        ,{ 
                            id    : "clear"
                            ,label : "Clear cached result"
                            ,cb    : ga.cache.clear
                            ,adata  : [ uuid, cachedelete ]
                        }
                        ,{
                            id    : "cancel",
                            label : "Cancel"
                        }
                    ]
                } );
                return;
            }
        }
        break;
    }
    cb_get_results( uuid, 0, 1, 1 );
    return;
}
        
ga.cache.clear = function( uuid, cachedelete ) {
    
    // maybe messagebox to confirm delete of cached results
    messagebox( {
        icon  : "admin.png"
        ,text  : "Are you sure you want to permanently remove this previously computed result?"
        ,buttons : [
            { 
                id    : "clear"
                ,label : "Clear cached result"
                ,cb    : ga.cache.doclear
                ,adata  : [ uuid, cachedelete ]
            }
            ,{
                id    : "cancel",
                label : "Cancel"
            }
        ]
    } );
}

ga.cache.doclear = function( uuid, cachedelete ) {
    
    // ajax call to clear
    if ( ga.cache.url_clear ) {
        $.getJSON( 
            ga.cache.url_clear,
            {
                tagmode       : "any"
                ,format       : "json"
                ,_window      : window.name
                ,_logon       : $( "#_state" ).data( "_logon" )
                ,_uuid        : uuid
                ,_cachedelete : cachedelete
            } )
            .done( function( data, status, xhr ) {
                ;
                if ( data[ 'success' ] == "true" ) {
                    messagebox( { icon : "information.png",
                                  text : "Previously computed results cleared" } );
                } else {
                    messagebox( { icon : "toast.png",
                                  text : data[ 'error' ] } );
                }
                
            })
            .fail( function( xhr, status, errorThrown ) {
                ;
                console.warn( "could not clear cache data" );
                messagebox( { icon : "toast.png",
                              text : "Error: server failed to clear cached entry" } );
            });
    } else {
        messagebox( { icon : "toast.png",
                      text : "Internal error: no url defined for cache clear" } );
    }
}

ga.trytilltrue = function( testeval, doeval, maxtries, timeout ) {
    ;
    if ( eval( testeval ) ) {
        return eval( doeval );
    }
    maxtries--;
    if ( maxtries < 0 ) {
        console.warn( "ga.trytilltrue failed ... to many tries" );
        return;
    }
    return setTimeout( ga.trytilltrue, timeout, testeval, doeval, maxtries, timeout );
}

ga.login = {};

ga.login.verify = function( data ) {
    var msg = { text : data.text || "You must verify your email address." };

    if ( data.useroptions ) {
        if ( data.useroptions.resend ) {
            msg.buttons = msg.buttons || [];
            msg.buttons.push( { 
                id : "resend"
                ,label : "Resend the verification email"
                ,cb : ga.login.verify.resend
            } );
        }
        if ( data.useroptions.resend ) {
            msg.buttons = msg.buttons || [];
            msg.buttons.push( { 
                id : "changeaddress"
                ,label : "Change your email address and resend the verification" 
                ,cb : ga.login.verify.change
            } );
        }
        if ( data.useroptions.cancel ) {
            msg.buttons = msg.buttons || [];
            msg.buttons.push( {
                id : "cancelregistration"
                ,label : "Cancel your registration" 
                ,cb    : ga.login.verify.cancel
            } );
        }
    }                                

    messagebox( msg );
}

ga.login.verify.resend = function () {
    
    var form = $( "#sys_login" );
    if ( !form ) {
        return messagebox( { icon : "toast.png", text: "Internal error: form missing" } );
    }
    form.append( '<input type="hidden" name="_resendverify" class="toclear">' );
    do_sys_login_submit( form );
}

ga.login.verify.change = function () {
    
    return messagebox( {
        icon : "question.png"
        ,text : '<center><label  class="header3 ">Change email address</label></center><form id="_changeemail"><table><tr><td><label for="_changeemail1">Email address </label></td><td><input type="email" name="_changeemail1" id="_changeemail1" required size="50" class="help_link"><span class="help">Enter a valid email address.  This will be required if you forget your password.  Otherwise, you will have to create a new account lose access to your projects</span><span id="_changeemail1_msg" class="warning field_msg" > </span></td></tr><tr><td><label for="_changeemail2">Repeat email address </label></td><td><input type="email" name="_changeemail2" id="_changeemail2" required size="50" class="help_link"><span class="help">Enter a valid email address.  This will be required if you forget your password.  Otherwise, you will have to create a new account lose access to your projects</span><span id="_changeemail2_msg" class="warning field_msg" > </span></td></tr></table></form><script>$( "#_changeemail1" ).keypress( function() { $( "#_changeemail1_msg" ).html( "" );});$( "#_changeemail2" ).keypress( function() { $( "#_changeemail2_msg" ).html( "" );});$( "#_changeemail2" ).blur( function() { ga.valid.checkMatch( "#_changeemail2", "#_changeemail1" ); } );setHoverHelp();</script>'
        ,buttons : [ 
            { 
                id     : "_changeemailbutton"
                ,label : "Submit"
                ,cb    : ga.login.verify.change.do
            }
            ,{
                id     : "_changeemailcancel"
                ,label : "Cancel"
            }
        ]
    } );
}

ga.login.verify.change.do = function () {
    
    var form = $( "#sys_login" );
    if ( !form ) {
        return messagebox( { icon : "toast.png", text: "Internal error: form missing" } );
    }
// window to input email 2x to verify
    form.append( '<input type="hidden" name="_resendverify" class="toclear">' );
    form.append( '<input type="hidden" name="_changeemail" class="toclear">' );
    form.append( '<input type="hidden" name="_changeemail1" value="' + $( "#_changeemail1" ).val() + '" class="toclear">' );
    form.append( '<input type="hidden" name="_changeemail2" value="' + $( "#_changeemail2" ).val() + '" class="toclear">' );
    do_sys_login_submit( form );
}

ga.login.verify.cancel = function () {
    
    var form = $( "#sys_login" );
    if ( !form ) {
        return messagebox( { icon : "toast.png", text: "Internal error: form missing" } );
    }
    form.append( '<input type="hidden" name="_cancel" class="toclear">' );
    do_sys_login_submit( form );
}

ga.login.approve = function( data ) {
    var msg = { text : data.text || "Your registration is pending approval." };

    if ( data.useroptions ) {
        if ( data.useroptions.resend ) {
            msg.buttons = msg.buttons || [];
            msg.buttons.push( { 
                id : "resend"
                ,label : "Resend the approval request"
                ,cb : ga.login.approve.resend
            } );
        }
        if ( data.useroptions.cancel ) {
            msg.buttons = msg.buttons || [];
            msg.buttons.push( {
                id : "cancelregistration"
                ,label : "Cancel your registration request" 
                ,cb    : ga.login.approve.cancel
            } );
        }
    }                                

    messagebox( msg );
}

ga.login.approve.resend = function () {
    
    var form = $( "#sys_login" );
    if ( !form ) {
        return messagebox( { icon : "toast.png", text: "Internal error: form missing" } );
    }
    form.append( '<input type="hidden" name="_resendapprove" class="toclear">' );
    do_sys_login_submit( form );
}

ga.login.approve.cancel = function () {
    
    var form = $( "#sys_login" );
    if ( !form ) {
        return messagebox( { icon : "toast.png", text: "Internal error: form missing" } );
    }
    form.append( '<input type="hidden" name="_cancel" class="toclear">' );
    do_sys_login_submit( form );
}

ga.admin = {};
ga.admin.ajax = function ( cmd, name, id, manageid ) {
    
    $.get( 
        ga.admin.ajax.url
        ,{
            tagmode       : "any"
            ,format       : "json"
            ,_window      : window.name
            ,_logon       : $( "#_state" ).data( "_logon" )
            ,_cmd         : cmd
            ,_name        : name
            ,_id          : id
            ,_manageid    : manageid
        } )
        .done( function( data, status, xhr ) {
            ;
            // required to remove the shebang (#!) 1st line of the script
            data = JSON.parse( data.split( /\r?\n/)[1]);
            if ( data[ 'success' ] == "true" ) {
                // messagebox( { icon : "information.png",
                // text : "system user management command returned success" } );
            } else {
                messagebox( { icon : "toast.png",
                              text : data[ 'error' ] ? data[ 'error' ] : "unknown error"  } );
            }
            
            if ( data[ '_submitid' ] ) {
                $( "#" + data[ '_submitid' ] ).trigger( "click" );
            }
        })
        .fail( function( xhr, status, errorThrown ) {
            ;
            messagebox( { icon : "toast.png",
                          text : "Error: system user management backend command failed to run: " + errorThrown } );
        });
}

ga.admin.ajax.remove = function ( cmd, name, id, manageid ) {
    messagebox( {
        icon  : "admin.png"
        ,text  : "Are you sure you want to permanently remove this user, all of their job history and their stored data?"
        ,buttons : [
            { 
                id    : "yes"
                ,label : "Yes, remove this user"
                ,cb    : ga.admin.ajax
                ,adata  : [ cmd, name, id, manageid ]
            }
            ,{
                id    : "cancel",
                label : "Cancel"
            }
        ]
    } );
}

ga.extrahidden = function( moduleid ) {
    
    if ( !ga.set.data[ "extrahidden" ] ||
         !ga.set.data[ "extrahidden" ][ moduleid ] ) {
        
        return;
    }

    var jqmod = $( "#" + moduleid ),
    i,
    html = "";

    for ( i in ga.set.data[ "extrahidden" ][ moduleid ] ) {
        html +='<input type="hidden" name="' + i + '" value="' + ga.set.data[ "extrahidden" ][ moduleid ][ i ] + '">';
    }

    

    jqmod.append( html );
    
    delete ga.set.data[ "extrahidden" ][ moduleid ];
}
/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

ga.colors = function( colors ) {
    
    ga.colors.background = ga.colors.makeRGB( colors.background );
    ga.colors.text       = ga.colors.makeRGB( colors.text );
};

ga.colors.makeRGB = function( color ) {
    
    var res;
    if ( /\d{1,3},\s*\d{1,3},\s*\d{1,3}$/.test( color ) ) {
        
        return color;
    }

    res = ga.color.toRGB( color );

    
    
    return res.r + "," + res.g + "," + res.b;
}

ga.plot_options = function () {
    var textcolor = "rgb( " + ga.colors.text + " )",
        retobj = {
            font : {
                color : textcolor
            },
            grid : {
                hoverable: false
            },
            xaxis : {
                color : "gray",
                lineWidth : 0.5,
                font : {
                    color : textcolor
                }
            },
            yaxis : {
                color : "gray",
                lineWidth : 0.5,
                font : {
                    color : textcolor
                }
            },
            lines: { 
                lineWidth : 1.0
            },
            zoom: {
                interactive: false
            },
            pan: {
                interactive: false
            }
        };

    return retobj;
};

ga.color = function( colors ) {
    
    ga.color.data = colors;
    ga.colors( colors.body );
    ga.color.apply();
}

ga.color.defaults = function( colors ) {
    
    ga.browser();
    ga.color.defaults.data = colors;
    ga.color( colors );
}

ga.color.toRGB = function( color ) {
    
    var r, g, b, re;

    if ( color.slice( 0, 1 ) === "#" ) { 
        // adjust help background color
        b = parseInt( color.slice( 1 ), 16 );
        g = parseInt( b / 256 );
        b -= g * 256;
        r = parseInt( g / 256 );
        g -= r * 256;

        
        return { r:r, b:b, g:g };
    }

    

    bits = /^rgb\(\s*(\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\s*\)$/.exec( color );
    if ( bits ) {
        r = parseInt( bits[ 1 ] );
        g = parseInt( bits[ 2 ] );
        b = parseInt( bits[ 3 ] );
    } else {
        r = 128;
        g = 128;
        b = 128;
    }

    return { r:r, b:b, g:g };
}

ga.color.apply = function() {
    var i
        ,jq
        ,r, g, b
        ,r0, g0, b0
        ,tmp
    ;

    

    if ( !ga.directives.data || !ga.directives.data[ "usercolors" ] ||
         /^(off|0|false)$/.test( ga.directives.data[ "usercolors" ] ) ) {
        
        return;
    }

    for ( i in ga.color.data ) {
        if ( ga.color.data.hasOwnProperty( i ) ) {
            
            if ( jq = $( i ) ) {
                jq.css( ga.color.data[ i ] );
            }
        }
    }

    $( ".sidebar ul li, .title" )
        .css( "color", ga.color.data.body.color )
        .hover( function() { $(this).css( "color", ga.color.defaults.data.hovercolor.color );}, 
                function() { $(this).css( "color", ga.color.data.body.color );} )
    ;

    $( ".svgmenu" )
        .css( { "color" : ga.color.data.body.color, "stroke" : ga.color.data.body.color } )
        .hover( function() { $(this).css( { "color" : ga.color.defaults.data.hovercolor.color, "stroke" : ga.color.defaults.data.hovercolor.color } ) },
                function() { $(this).css( { "color" : ga.color.data.body.color, "stroke" : ga.color.data.body.color } ) } )
    ;

    if ( ga.color.data.body.background.slice( 0, 1 ) === "#" ) { 
        // adjust help background color
        b = parseInt( ga.color.data.body.background.slice( 1 ), 16 );
        g = parseInt( b / 256 );
        b -= g * 256;
        r = parseInt( g / 256 );
        g -= r * 256;

        r += r > 128 ? -20 : 20;
        g += g > 128 ? -20 : 20;
        b += b > 128 ? -20 : 20;

        

        $( ".help,.coord" )
            .css( { background : "rgba(" + r + "," + g + "," + b + ",0.8)",
                    color      : ga.color.data.body.color } )
        ;
    } else {
        $( ".help,.coord" )
            .css( { background : ga.color.data[ ".help" ].background,
                    color      : ga.color.data[ ".help" ].color } )
        ;
    }

    if ( ga.color.data.body.color.slice( 0, 1 ) === "#" ) {
        // adjust header colors
        b = parseInt( ga.color.data.body.color.slice( 1 ), 16 );
        g = parseInt( b / 256 );
        b -= g * 256;
        r = parseInt( g / 256 );
        g -= r * 256;

        r0 = r;
        g0 = g;
        b0 = b;
        
        r += r > 128 ? -12 : 12;
        g += g > 128 ? -12 : 12;
        b += b > 128 ? -12 : 12;

        $( ".header1" ).css( { color : "rgb(" + r + "," + g + "," + b + ")" } );

        r += r > 128 ? -12 : 12;
        g += g > 128 ? -12 : 12;
        b += b > 128 ? -12 : 12;

        $( ".header2" ).css( { color : "rgb(" + r + "," + g + "," + b + ")" } );

        r += r > 128 ? -12 : 12;
        g += g > 128 ? -12 : 12;
        b += b > 128 ? -12 : 12;

        $( ".header3" ).css( { color : "rgb(" + r + "," + g + "," + b + ")" } );

        r += r > 128 ? -12 : 12;
        g += g > 128 ? -12 : 12;
        b += b > 128 ? -12 : 12;

        $( ".header4" ).css( { color : "rgb(" + r + "," + g + "," + b + ")" } );

        r += r > 128 ? -12 : 12;
        g += g > 128 ? -12 : 12;
        b += b > 128 ? -12 : 12;

        $( "hr" ).css( { color : "rgb(" + r + "," + g + "," + b + ")" } );

        // links
        {
            r = r0;
            g = g0;
            b = b0;

            g += g > 128 ? -75 : 75;
            ga.cssrule.kill('a:link');
            tmp = ga.cssrule.add( 'a:link' );
            tmp.style.color = "rgb(" + r + "," + g + "," + b + ")";
            g = g0;

            b += b > 128 ? -75 : 75;
            r += r > 128 ? -75 : 75;
            ga.cssrule.kill('a:visited');
            tmp = ga.cssrule.add( 'a:visited' );
            tmp.style.color = "rgb(" + r + "," + g + "," + b + ")";
            b = b0;
            r = r0;

            r += r > 128 ? -75 : 75;
            ga.cssrule.kill('a:active');
            tmp = ga.cssrule.add( 'a:active' );
            tmp.style.color = "rgb(" + r + "," + g + "," + b + ")";

        }
    } else {
        $( ".header1" ).css( { color : ga.color.data[ ".header1" ] ? ga.color.data[ ".header1" ].color : ga.color.data.body.color } );
        $( ".header2" ).css( { color : ga.color.data[ ".header2" ] ? ga.color.data[ ".header2" ].color : ga.color.data.body.color } );
        $( ".header3" ).css( { color : ga.color.data[ ".header3" ] ? ga.color.data[ ".header3" ].color : ga.color.data.body.color } );
        $( ".header4" ).css( { color : ga.color.data[ ".header4" ] ? ga.color.data[ ".header4" ].color : ga.color.data.body.color } );
    }

    // modals

    $( ".modalDialog > div, .modalDialog2 > div, .modalDialog3 > div, .modalDialog4 > div" )
    .css( { background : ( ga.browser.gradient 
                           ? ga.browser.prefix + "linear-gradient(" + ga.color.data.body.background + ", #222)"
                           : ga.color.data.body.background ) } );



}

ga.color.reset = function() {
    
    ga.color( ga.color.defaults.data );
}

ga.color.spectrum = function( id ) {
    if ( ga.browser.clrpkr ) {
        return;
    }
    $( id ).on('change.spectrum', function( e, color ) { console.log( "hi spectrum" + id ); $( id ).val( color.toHexString() );  } );
}

ga.color.spectrum.val = function( id, val ) {
    if ( ga.browser.clrpkr ) {
        return;
    }

    if ( val ) {
        
        $( id ).spectrum( { color: val } );
        return;
    }
    return $( id ).spectrum( 'get' ).toHexString();
}
/*jslint white: true, plusplus: true*/
/* assumes: ga, jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */


ga.event = function ( menu, module, action ) {

    ga.event.log.push( {
        menu   : menu,
        module : module,
        action : action,
        when   : new Date()
    });
}

ga.event.log = [];

ga.event.list = function() {
    var j=0,
        l = ga.event.log.length,
        now = new Date(),
        result = "Client Date/Time is " + now.toUTCString() + "\n";


    for ( ; j < l ; j++ ) {
        result += ga.event.log[ j ].menu + " " + ga.event.log[ j ].module + " " + ga.event.log[ j ].action + " " + ga.event.log[ j ].when.toUTCString() + "\n";
    }


    return result;
}

    

    


/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

ga.fc = function( id, cb ) {
    var i,
        waits;

    
    if ( ga.fc.cache[ id ] ) {
        
        cb( ga.fc.cache[ id ] );
    } else {
        // only one ajax call per id
        if ( !ga.fc.waits[ id ] )
        {
            
            ga.fc.waits[ id ] = [ cb ];
            $.ajax( ga.fc.url + id ).success( function( data ) {
                
                waits = ga.fc.waits[ id ];
                delete ga.fc.waits[ id ];
                data = $.parseJSON( data );
                ga.fc.cache[ id ] = data;
                
                for ( i = waits.length; i--; )
                {
                    waits[ i ]( data );
                }
            }).error( function( error ) {
                
                waits = ga.fc.waits[ id ];
                delete ga.fc.waits[ id ];
                console.log( "ajax error" );
                console.dir( error );
                for ( i = waits.length; i--; )
                {
                    waits[ i ]( "**error**" );
                }
                ga.fc.ajax_error_msg( "ajax get error: " + error.statusText );
            });
        } else {
            
            ga.fc.waits[ id ].push( cb );
        }
    }
    return true;
};

ga.fc.clear = function( id ) {
    var i,
        children = ga.fc.children( id );
    

    for ( i in children ) {
        if ( ga.fc.cache[ i ] ) {
            delete ga.fc.cache[ i ];
        }
    }
    if ( ga.fc.cache[ id ] ) {
        delete ga.fc.cache[ id ];
    }
    for ( i in ga.fc.trees ) {
        if ( $( i ).length )
        {
            if ( id !== "#" ) {
                $( i ).jstree( true ).refresh_node( id );
            } else {
                $( i ).jstree( true ).refresh();
            }
        }
    }
};

ga.fc.refresh = function( id ) {
    var i;

    

    for ( i in ga.fc.trees ) {
        if ( $( i ).length )
        {
            if ( ga.fc.cache[ id ] ) {
                if ( id !== "#" ) {
                    $( i ).jstree( true ).refresh_node( id );
                } else {
                    $( i ).jstree( true ).refresh();
                }
            }
        }
    }
};


ga.fc.delete_node = function( ids ) {
    var i;

    

    if ( !ids.length ) {
        return;
    }
        

    if ( ga.fc.url_delete && ga.fc.url_delete.length !== 0 ) {
        $.ajax({
              url      : ga.fc.url_delete,
              data     :  {
                            _window : window.name,
                           _spec   : "fc_cache",
                           _delete : ids.join( ',' )
                         },
              dataType : 'json',
              method   : 'POST'
            }).success( function( data ) {
            console.log( "ajax delete done" );
//            console.dir( data );
            if ( data.error && data.error.length ) {
//                ga.fc.refresh( "#" );
                ga.fc.delete_error_msg( ids, data.error );
            } else {
// we are always clearing the whole tree on delete
//                if ( data.reroot && data.reroot === 1 ) {
                ga.fc.clear( "#" );
//                } else {
//                    for ( i in ga.fc.trees ) {
//                        if ( $( i ).length )
//                        {
//                            console.log( "ga.fc.remove from tree " + i );
//                            console.dir( ids );
//                            $( i ).jstree( true ).delete_node( ids );
//                        }
//                    }
//                }
            }

        }).error( function( error ) {
            console.log( "ajax error" );
            console.dir( error );
//            ga.fc.refresh( "#" );
            ga.fc.ajax_error_msg( "ajax delete error: " + error.statusText );
        });
;
    } else {
        console.log( "ga.fc.delete_node, no url_delete " + ids.join( "," )  );
    }
};

ga.fc.delete_node_message = function( ids ) {
    var msg = "You are about to permanently remove " + ids.length + " file";
//        strip2 = function(str) { return str.substr( 2 ); };    

    if ( !ids.length ) {
        return "Can not remove a directory from here";
    }
    if ( ids.length > 1 ) {
        msg += "s and/or directories";
    } else {
        msg += " or directory";
    }
    msg += " and the contents, including subdirectories, of any directory listed below<p>";

    return msg;
// :<p>" + $.map( $.map( ids.slice( 0, 5 ), $.base64.decode ), strip2 ).join( "<p>" );
//    if ( ids.length > 5 ) {
//        msg += "<p> Note: an additional " + ( ids.length - 5 ) + " entr";
//        if ( ids.length > 6 ) {
//            msg += "ies are not shown. ";
//        } else {
//            msg += "y is not shown. ";
//        }
//    }
//    return msg;
};

ga.fc.delete_node_message_files = function( ids ) {
    return ids.length ? "<div class=\"table-wrapper\"><table><tr><td>" + 
           $.map( $.map( ids, $.base64.decode ), function(str) { return str.substr( 2 ); } )
           .join( "</td></tr><tr><td>" ) + "</td></tr></table></div>" : "";
};

ga.fc.children = function( id, result ) {
    var i,
        idc;
    
    result = result || {};
    if ( ga.fc.cache[ id ] )
    {
        // expand and return all children in the cache
        for ( i = ga.fc.cache[ id ].length; i--; ) {
            if ( ga.fc.cache[ id ][ i ].children ) {
                idc = ga.fc.cache[ id ][ i ].id;
                if ( ga.fc.cache[ idc ] ) {
                   result[ idc ] = true;
                   result = ga.fc.children( idc, result );
                }
            }
        }
    }
    return result;
};   

ga.fc.cache = {};
ga.fc.waits = {};
ga.fc.trees = {};
/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

ga.jc = function( id, cb ) {
    var i,
        waits;

;

    if ( ga.jc.cache[ id ] ) {
        cb( ga.jc.cache[ id ] );
    } else {
        // only one ajax call per id
        if ( !ga.jc.waits[ id ] )
        {
            ga.jc.waits[ id ] = [ cb ];
            $.ajax( { url:ga.jc.url , data:{ _tree:id, _window: window.name } } ).success( function( data ) {
                waits = ga.jc.waits[ id ];
                delete ga.jc.waits[ id ];
                data = $.parseJSON( data );
                ga.jc.cache[ id ] = data;
                
                for ( i = waits.length; i--; )
                {
                    waits[ i ]( data );
                }
            }).error( function( error ) {
                waits = ga.jc.waits[ id ];
                delete ga.jc.waits[ id ];
                console.log( "ajax error" );
                console.dir( error );
                for ( i = waits.length; i--; )
                {
                    waits[ i ]( "**error**" );
                }
                ga.jc.ajax_error_msg( "ajax get error: " + error.statusText );
            });
        } else {
            ga.jc.waits[ id ].push( cb );
        }
    }
    return true;
};

ga.jc.clear_leaf = function( id ) {
;
    var i,
        any_contain = 0,
        node;

// does any tree currently have the node ?
    for ( i in ga.jc.trees ) {
        if ( $( i ).length )
        {
            node = $( i ).jstree( true ).get_node( id );
            if ( node ) {
                any_contain = 1;
                break;
            }
        }
    }

    any_contain ? ga.jc.clear( node.parent ) : ga.jc.clear( "#" );
}

ga.jc.clear = function( id ) {
    var i,
        children = ga.jc.children( id );

    for ( i in children ) {
        if ( ga.jc.cache[ i ] ) {
            delete ga.jc.cache[ i ];
        }
    }
    if ( ga.jc.cache[ id ] ) {
        delete ga.jc.cache[ id ];
    }
    for ( i in ga.jc.trees ) {
        if ( $( i ).length )
        {
            if ( id !== "#" ) {
                $( i ).jstree( true ).refresh_node( id );
            } else {
                $( i ).jstree( true ).refresh();
            }
        }
    }
};

ga.jc.refresh = function( id ) {
    var i;

    for ( i in ga.jc.trees ) {
        if ( $( i ).length )
        {
            if ( ga.jc.cache[ id ] ) {
                if ( id !== "#" ) {
                    $( i ).jstree( true ).refresh_node( id );
                } else {
                    $( i ).jstree( true ).refresh();
                }
            }
        }
    }
};


ga.jc.delete_node = function( ids ) {
    var i;

    if ( !ids.length ) {
        return;
    }
        

    if ( ga.jc.url_delete && ga.jc.url_delete.length !== 0 ) {
        $.ajax({
              url      : ga.jc.url_delete,
              data     :  {
                            _window : window.name,
                           _spec   : "fc_cache",
                           _delete : ids.join( ',' )
                         },
              dataType : 'json',
              method   : 'POST'
            }).success( function( data ) {
            console.log( "ajax delete done" );
//            console.dir( data );
            if ( data.error && data.error.length ) {
//                ga.jc.refresh( "#" );
                ga.jc.delete_error_msg( ids, data.error );
            } else {
// we are always clearing the whole tree on delete
//                if ( data.reroot && data.reroot === 1 ) {
                ga.jc.clear( "#" );
//                } else {
//                    for ( i in ga.jc.trees ) {
//                        if ( $( i ).length )
//                        {
//                            console.log( "ga.jc.remove from tree " + i );
//                            console.dir( ids );
//                            $( i ).jstree( true ).delete_node( ids );
//                        }
//                    }
//                }
            }

        }).error( function( error ) {
            console.log( "ajax error" );
            console.dir( error );
//            ga.jc.refresh( "#" );
            ga.jc.ajax_error_msg( "ajax delete error: " + error.statusText );
        });
;
    } else {
        console.log( "ga.jc.delete_node, no url_delete " + ids.join( "," )  );
    }
};

ga.jc.delete_node_message = function( ids ) {
    var msg = "You are about to permanently remove " + ids.length + " job";

    if ( ids.length > 1 ) {
        msg += "s";
    }
    return msg;
};

ga.jc.delete_node_message_files = function( ids ) {
    return ids.length ? "<div class=\"table-wrapper\"><table><tr><td>" + 
           $.map( $.map( ids, $.base64.decode ), function(str) { return str.substr( 2 ); } )
           .join( "</td></tr><tr><td>" ) + "</td></tr></table></div>" : "";
};

ga.jc.children = function( id, result ) {
    var i,
        idc;
    result = result || {};
    if ( ga.jc.cache[ id ] )
    {
        // expand and return all children in the cache
        for ( i = ga.jc.cache[ id ].length; i--; ) {
            if ( ga.jc.cache[ id ][ i ].children ) {
                idc = ga.jc.cache[ id ][ i ].id;
                if ( ga.jc.cache[ idc ] ) {
                   result[ idc ] = true;
                   result = ga.jc.children( idc, result );
                }
            }
        }
    }
    return result;
};   

ga.jc.cache = {};
ga.jc.waits = {};
ga.jc.trees = {};
/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

ga.altfile = function( module, idfile, idref ) {

    ga.altfile.data[ module ] = ga.altfile.data[ module ] || {};
    ga.altfile.data[ module ][ idfile ] = idref;
};

ga.altfile.data  = {};
ga.altfile.bdata = {};

ga.altfile.list = function( module ) {
    var i;
    if ( !ga.altfile.data[ module ] ) {
        console.log( "module:" + module + " Empty" );
        return;
    }

    for ( i in ga.altfile.data[ module ] ) {
        console.log( "module:" + module + " idfile:" + i + " idref:" + ga.altfile.data[ module ][ i ] );
    }
};

ga.altfile.listall = function() {
    var i;
    if ( !ga.altfile.data ) {
        console.log( "ga.altfile:no modules" );
        return;
    }

    for ( i in ga.altfile.data ) {
        ga.altfile.list( i );
    }
};
    
ga.altfile.test = function() {
  ga.altfile( "module1", "field1", "ref1" );
   ga.altfile( "module1", "field2", "ref2" );
   ga.altfile( "module2", "field3", "ref3" );
   ga.altfile.listall();
};

ga.altfile.add = function( module ) {
   var i,
       add = "",
       ms = "#" + module;


   $( ms + " ._hidden_altfiles" ).remove();
   $( ms + " ._hidden_buttonvals" ).remove();

   if ( ga.altfile.data[ module ] ) {
      for ( i in ga.altfile.data[ module ] ) {

         add += '<input type="hidden" name="_selaltval_' + i + '" value="' + ga.altfile.data[ module ][ i ] + '" class="_hidden_altfiles">';
      }
   }

   if ( ga.altfile.bdata[ module ] ) {
      for ( i in ga.altfile.bdata[ module ] ) {

         add += '<input type="hidden" name="' + i + '" value="' + ga.altfile.bdata[ module ][ i ].val + '" class="_hidden_buttonvals">';
      }
   }

   if ( add.length ) {
      $( ms ).append( add );
   }
};

ga.altfile.button = function( module, id, text, call, cb, required ) {

   ga.altfile.bdata[ module ] = ga.altfile.bdata[ module ] || {};
   ga.altfile.bdata[ module ][ id ] = {};
   ga.altfile.bdata[ module ][ id ].val = {};
   ga.altfile.bdata[ module ][ id ].text = text;
   ga.altfile.bdata[ module ][ id ].call = call;  // the name of the sys module to call
   ga.altfile.bdata[ module ][ id ].cb = cb;      // the callback called upon 'submit' cb of the module
   ga.altfile.bdata[ module ][ id ].req = required || 0;
}

ga.altfile.button.value = function( module, id, val ) {

   ga.altfile.bdata[ module ][ id ].val = val;
}

ga.altfile.button.call = function( module, id ) {
   var tmp;

   if ( ga.altfile.bdata[ module ][ id ].call.length ) {
       tmp = $( '#_state' ).data( '_logon' );
       if ( !tmp || !tmp.length ) {
           messagebox( {
               icon : "warning.png",
               text : "You must login to browse server information",
               buttons : [
                 { id    : "ok",
                   label : "OK" } ]
            });
       } else {
          $( "#configbody" ).load( "etc/" + ga.altfile.bdata[ module ][ id ].call + ".html", function() {
// ok, this is saving the last call back, but modals are singleton, so it *should* be ok
              ga.altfile.bdata[ ga.altfile.bdata[ module ][ id ].call ] = {};
              ga.altfile.bdata[ ga.altfile.bdata[ module ][ id ].call ].cb = ga.altfile.bdata[ module ][ id ].cb;

              $( "#" + ga.altfile.bdata[ module ][ id ].call + "text_label" ).text( ga.altfile.bdata[ module ][ id ].text );
          });
          ga.repeats.save();
          $( ".modalDialog" ).addClass( "modalDialog_on" );
       }
   } else {
     ga.altfile.bdata[ module ][ id ].cb("cb");
   }
   return false;
}

ga.altfile.button.simplecall = function( module, id ) {
    var tmp;
    
    $( "#configbody" ).load( "ajax/" + module + "/" + id + ".html", function() {
        
    });
    ga.repeats.save();
    $( ".modalDialog" ).addClass( "modalDialog_on" );
    return false;
}

ga.altfile.button.cb = function() {

    closeModal();
}



ga.altfile.button.lrfile = function( treeid, module, id ) {
  var r      = [],
      hmod   = "#" + module,
      hid    = "#" + id,
      add    = "",
      hclass = "_hidden_lrfile_sels_" + id;


  $( hmod + " ." + hclass ).remove();
  $.each( $(treeid).jstree("get_checked", true), function() {

     if ( !this.children.length ) {
       add += '<input type="hidden" name="' + id + '_altval[]" value="' + this.id + '" class="' + hclass + '">';
         r.push( $.base64.decode( this.id ).substr( 2 ) );
     }
  });

  if ( r.length ) {
      
     $( hid + "_altval").html( "<i>Server</i>: " + r );
     $( hid + "_msg").html( "" );
     $( hid ).val("");
     $( hmod ).append( add );

      if (ga.value.input[module] && ga.value.input[ module ][id])
      {
	  var mode = ga.value.input[ module ][id].mode;
	  var ids  = ga.value.input[ module ][id].ids;
	  ga.value.setInputfromRFile(r, mode, ids);
      }

  }
}
   
ga.altfile.button.rpath = function( treeid, module, id ) {
  var r      = [],
      hmod   = "#" + module,
      hid    = "#" + id,
      add    = "",
      hclass = "_hidden_rpath_sels_" + id,
      s      = $(treeid).jstree(true);


  $( hmod + " ." + hclass ).remove();
  $.each( s.get_top_checked(true), function() {
 
     if ( !s.is_leaf( this ) ) {
       add += '<input type="hidden" name="' + id + '[]" value="' + this.id + '" class="' + hclass + '">' +
              '<input type="hidden" name="_decodepath_' + id + '" class="' + hclass + '">';
       r.push( $.base64.decode( this.id ).substr( 2 ) );
     }
  });

  if ( r.length ) {
     $( hid + "_altval").html( "<i>Server</i>: " + r );
     $( hid + "_msg").html( "" );
     $( hid ).val("");
     $( hmod ).append( add );

  }
}

ga.altfile.button.rfile = function( treeid, module, id ) {
  var r      = [],
      hmod   = "#" + module,
      hid    = "#" + id,
      add    = "",
      hclass = "_hidden_rfile_sels_" + id,
      s      = $(treeid).jstree(true);


  $( hmod + " ." + hclass ).remove();
  $.each( $(treeid).jstree("get_checked", true), function() {

     if ( !this.children.length ) {
       add += '<input type="hidden" name="' + id + '_altval[]" value="' + this.id + '" class="' + hclass + '">';
       r.push( $.base64.decode( this.id ).substr( 2 ) );
     }
  });

  if ( r.length ) {
     $( hid + "_altval").html( "<i>Server</i>: " + r );
     $( hid + "_msg").html( "" );
     $( hid ).val("");
     $( hmod ).append( add );

      if (ga.value.input[module] && ga.value.input[ module ][id])
      {
	  var mode = ga.value.input[ module ][id].mode;
	  var ids  = ga.value.input[ module ][id].ids;
	  ga.value.setInputfromRFile(r, mode, ids);
      }
  }
}

ga.altfile.button.job = function( treeid, module, id ) {
  var r      = "",
      hmod   = "#" + module,
      hid    = "#" + id,
      add    = "",
      hclass = "_hidden_job_sels_" + id,
      s      = $(treeid).jstree(true);


  $( hmod + " ." + hclass ).remove();
  $.each( $(treeid).jstree("get_checked", true), function() {

     if ( !this.children.length ) {
       add += '<input type="hidden" name="' + id + '_altval[]" value="' + this.id + '" class="' + hclass + '">';
       r+="<tr><td>" + this.parent +":" + this.text + "</td></tr>";
     }
  });

  if ( r.length ) {
     $( hid + "_altval").html( "<table>" + r + "</table>" );
     $( hid + "_msg").html( "" );
     $( hid ).val("");
     $( hmod ).append( add );

  }
}

// ga.altfile.test();

ga.altfile.button.getnames = function( id, type ) {
    var r = [];
    switch( type ) {
    case "rpath" :
        r.push( id + '[]' );
        // r.push( '_decodepath_' + id );
        break;
    case "rfile" :
        r.push( id + '_altval[]' );
        break;
    case "lrfile" :
        id = id.replace( /_button$/, "" );
        r.push( id + '_altval[]' );
        break;
    default :
        console.warn( "ga.altfile.button.getnames( " + id + " , " + type + " )" );
        break;
    }
    return r;
}

ga.altfile.button.getnamesinput = function( id, type ) {
    var r = [];
    switch( type ) {
    case "rpath" :
        r.push( id );
        // r.push( '_decodepath_' + id );
        break;
    case "rfile" :
        r.push( id + '_altval' );
        break;
    case "lrfile" :
        id = id.replace( /_button$/, "" );
        r.push( id + '_altval' );
        break;
    default :
        console.warn( "ga.altfile.button.getnames( " + id + " , " + type + " )" );
        break;
    }
    return r;
}


// this should probably be moved to load and not added at the end
ga.altfile.button.addhtml = function( mod, id, type, vals ) {
    var add = "",
        hclass;

    
    

    switch( type ) {
    case "rpath" :
        hclass = "_hidden_rpath_sels_" + id;
        add += '<input type="hidden" name="' + id + '[]" value="' + vals[ 0 ] + '" class="' + hclass + '">' +
               '<input type="hidden" name="_decodepath_' + id + '" class="' + hclass + '">';
        break;
    case "rfile" :
        hclass = "_hidden_rfile_sels_" + id,
        add += '<input type="hidden" name="' + id + '_altval[]" value="' + vals[ 0 ] + '" class="' + hclass + '">';
        break;
    case "lrfile" :
        id = id.replace( /_button$/, "" );
        hclass = "_hidden_lrfile_sels_" + id;
        add += '<input type="hidden" name="' + id + '_altval[]" value="' + vals[ 0 ] + '" class="' + hclass + '">';
        break;
    default :
        console.warn( "ga.altfile.button.getnames( " + id + " , " + type + " )" );
        break;
    }
    $( "#" + mod ).append( add );
    
    
}

/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

ga.valid = {};

ga.valid.checkMatch = function( tag1, tag2 ) {

   if ( $( tag1 ).val() != $( tag2 ).val() )
   {
      $( tag1 + "_msg" ).html( " does not match" );
   } else {
      $( tag1 + "_msg" ).html( "" );
   }
}
    
ga.valid.checkText = function( tag ) {
    var t = $( tag );
    var fieldValue=t.val();
    var ok = 0;
    var pattern = t.attr("pattern");
    var reg = new RegExp(pattern);
    
    
    if (pattern) {
	//console.log("It has pattern: " + pattern);
	
	if ( !reg.test(fieldValue) )
	{
	    //t.val( t.prop( "defaultValue" ) );
            if ( fieldValue.length || t.prop( "required" ) ) {
	        $( tag + "_msg" ).html( " wrong format" );
            } else {
                ok = 1;
            }
	}
	else {
	    ok = 1;
	    $( tag + "_msg" ).html("");
	}
    }	
    else {
	//console.log("No pattern!");
	if (!fieldValue && t.prop( "required" ) ) {
	    $( tag + "_msg" ).html(' missing required field');
	}
	else {
	    ok = 1;
	}
    }
    return ok; 
}

ga.valid.checkFloat = function( tag ) {
    
    var t = $( tag );
    var fieldValue=t.val();
    var ok = 0;
    //if ( isNaN( fieldValue ) ) 
    //if ( !fieldValue.match( /^[+-]?\d+(\.\d+)?$/ ) )
    
    if ( !fieldValue.match( /^-?(([1-9][0-9]*)|(0))?([.][0-9]+)?([eE][-+]?[0-9]+)?$/ ) )
    {
	// t.val( t.prop( "defaultValue" ) );                                
	//$( tag + "_msg" ).html( " not a valid floating point number, reset to default" );
        if ( fieldValue.length || t.prop( "required" ) ) {
	    $( tag + "_msg" ).html( " wrong format" );
        } else {
            ok = 1;
        }
    } else {
	ok = 1;
        if ( fieldValue < parseFloat ( t.attr( "min" ) ) )
	{ 
            t.val( t.attr( "min" ) );
            $( tag + "_msg" ).html( " value set to minimum allowed" );
	} else {
            if ( fieldValue > parseFloat ( t.attr( "max" ) ) )
            { 
		t.val( t.attr( "max" ) );
		$( tag + "_msg" ).html( " value set to maximum allowed" );
            } else {                                                             
		$( tag + "_msg" ).html( "" );
	    }
	} 
    }
    return ok; 
}

ga.valid.checkInt = function( tag ) {
    
    var t = $( tag );
    var fieldValue=t.val();
    var ok = 0;

    //if ( isNaN( fieldValue ) )
    //if ( !fieldValue.match( /^[+-]?\d+$/ ) )    
    if ( !fieldValue.match( /^-?((0)|([1-9][0-9]*))$/ ) )    
    {
	//t.val( t.prop( "defaultValue" ) );
	//$( tag + "_msg" ).html( " not a valid number, reset to default" );
        if ( fieldValue.length || t.prop( "required" ) ) {
	    $( tag + "_msg" ).html( " wrong format" );
        } else {
            ok = 1;
        }
    } else {
	ok = 1;
	if ( fieldValue < parseInt ( t.attr( "min" ) ) )
	{ 
            t.val( t.attr( "min" ) );
            $( tag + "_msg" ).html( " value set to minimum allowed" );
	} else {
            if ( fieldValue > parseInt ( t.attr( "max" ) ) )
            { 
		t.val( t.attr( "max" ) );
		$( tag + "_msg" ).html( " value set to maximum allowed" );
            } else {
		if ( parseInt( fieldValue ) != fieldValue )
		{   
                    $( tag + "_msg" ).html( " value rounded to nearset integer" );
                    t.val( parseInt( parseFloat( fieldValue ) + .5 ) );
		} else {
                    $( tag + "_msg" ).html( "" );
		}
            }
	}
    }
    return ok;
}

ga.valid.safeFile = function( tag ) {
   var t = $( tag );
   var fieldValue=t.val();
   if ( !fieldValue.match( "^[a-zA-Z0-9]+([a-zA-Z0-9_\.\-]+|\/[a-zA-Z0-9_\-])+$" ) )
   {
       t.val( t.prop( "defaultValue" ) );
       $( tag + "_msg" ).html( "Not an acceptable filename, reset to default" );
   } else {
       $( tag + "_msg" ).html( "" );
   }
}

ga.valid.checkLrfile = function( tag ) {

   var t   = $( tag ),
       r   = $( tag + '_altval > i' ),
       msg = $( tag + "_msg" ),
       ok  = 0;
   if ( !t || !t.is(':visible') ) {
       return 1;
   }
   if ( t && t.val() && t.val().length ) {

       ok = 1;
   } else {
       if ( r && r.html() && r.html().length && r.html() === "Server" ) {

           ok = 1;
       }
   }
   if ( !ok ) {
       msg.html( " missing required field" );
   }
   return ok;
}

ga.valid.checkRpath = function( tag ) {

   var t   = $( tag ),
       r   = $( tag + '_altval > i' ),
       msg = $( tag + "_msg" ),
       ok  = 0;

   if ( !t || !t.is(':visible') ) {
       return 1;
   }
   if ( r && r.html() && r.html().length && r.html() === "Server" ) {

       ok = 1;
   }
   if ( !ok ) {
       msg.html( " missing required field" );
   }

   return ok;
}

ga.valid.checkRfile = function( tag ) {

   var t   = $( tag ),
       r   = $( tag + '_altval > i' ),
       msg = $( tag + "_msg" ),
       ok  = 0;

   if ( !t || !t.is(':visible') ) {
       return 1;
   }
   if ( r && r.html() && r.html().length && r.html() === "Server" ) {

       ok = 1;
   }
   if ( !ok ) {
       msg.html( " missing required field" );
   }

   return ok;
}

ga.valid.checksubmit = function( module ) {
   var i,
       ok = 1;

   if ( !ga.altfile.bdata[ module ] && !ga.value.types[ module ]) {
      return 1;
   }

   for ( i in ga.altfile.bdata[ module ] ) {
      if ( ga.altfile.bdata[ module ][ i ].req  ) {
	  //console.log( "ga.altfile.bdata[ module ][ i ].req = " +  ga.altfile.bdata[ module ][ i ].req);
          switch ( ga.altfile.bdata[ module ][ i ].req ) {
              case "lrfile" : ok = ok && ga.valid.checkLrfile( "#" + i ); if ($("#" + i).length && !ga.valid.checkLrfile( "#" + i )) {++ga.fielderrors;} break;
              case "rpath"  : ok = ok && ga.valid.checkRpath ( "#" + i ); if ($("#" + i).length && !ga.valid.checkRpath ( "#" + i )) {++ga.fielderrors;} break;
              case "rfile"  : ok = ok && ga.valid.checkRfile ( "#" + i ); if ($("#" + i).length && !ga.valid.checkRfile ( "#" + i )) {++ga.fielderrors;} break;
              default       : console.log( "ga.valid.checksubmit() unsupported required check " +  ga.altfile.bdata[ module ][ i ].req ); break;
          }
      }
   }
    
    for ( i in ga.value.types[ module ] ) {
	if ( ga.value.types[ module ][ i ].req  ) {
	    //console.log( "ga.value.types[ module ][ i ].req = " +  ga.value.types[ module ][ i ].req);
            switch ( ga.value.types[ module ][ i ].req ) {
	    case "float": 
		if ($("#" + i).length && !ga.valid.checkFloat( "#" + i )) {++ga.fielderrors;}
		break;
	    case "integer": 
		if ($("#" + i).length && !ga.valid.checkInt( "#" + i )) {++ga.fielderrors;}
		break;
	    case "text": 
		if ($("#" + i).length && !ga.valid.checkText( "#" + i )) {++ga.fielderrors;}
		//console.log( "pattern of " + i + ": " + $('#'+i).attr("pattern") );
		//console.log( "text_req Check: " +  ga.valid.checkText( "#" + i ));
		break;	
	    case "file": 
		if ($("#" + i).length && !ga.valid.checkLrfile( "#" + i )) {++ga.fielderrors;}
		break;
	    default: 
		console.log( "ga.valid.checksubmit() unsupported required check " +  ga.value.types[ module ][ i ].req ); break;
		
	    }
	}
    }
    
    if (ga.fielderrors > 0)
    {
   	ok = 0;
    }
    
    //console.log( "ga.fielderrors = " + ga.fielderrors );     
    return ok;
}

ga.valid.showerrormessage = function() {
    messagebox( {
	icon : "warning.png",
	text : "" + ga.fielderrors + " fields are missing or not set correctly!",
	buttons : [
	    { id    : "ok",
	      label : "OK" } ]
    });
    ga.fielderrors = 0;
}

ga.valid.clearerrorcounter = function() {
    ga.fielderrors = 0;
}


ga.airavata = {};
ga.airavata.select = function( defaultresource, select, cb, form ) {
    var a            = ga.airavata.data
        ,msg         = ""
        ,button_info = []
        ,i
        ,key
        ,selecttype
        ,index
    ;
    
    

    if ( ( defaultresource == "__resource__" && !a.defaultresource ) ||
         ( defaultresource != "airavata" && defaultresource != "__resource__" ) ) {
        
        return "notused";
    }

    if ( !a.resources || !a.resources.length ) {
        messagebox( {
            icon  : "warning.png"
            ,text  : "No resources currently enabled for Airavata submission"
        });
        return "abort";
    }

    if ( a.resources.length == 1 ) {
        
        return Object.keys( a.resources[ index ] )[0];
    }

    selecttype = select != "__airavataselect__" ? select : ( a.select.length ? a.select : "random" );
    

    switch( selecttype ) {
        case "random" : 
        {
            index = Math.floor( a.resources.length * Math.random() );
            ;
            return Object.keys( a.resources[ index ] )[0];
        }
        break;
        case "choose" : 
        {
            button_info.push( {
                id : "submit_module"
                ,label : "Submit"
                ,data  : [ cb, form, a.resources ]
                ,cb    : function( data ) { 
                    
                    
                    data[0]( data[1], Object.keys( data[2][$( "#airavata input[name=selectresource]:checked" ).val() ] )[0] );
                }
            } );
            msg = '<h3>Select a resource compute resource and press submit</h3><form id="airavata"><table>';
            for ( i in a.resources ) {
                for ( key in a.resources[i] ) {
                    msg += '<tr><td><input type="radio" name="selectresource" id="airavata_' + i + '" value="' + i + '"' + ( i==0 ? 'checked="checked"' : '' ) + '></td><td class="hoverhighlight" style="text-align:left"><label for="airavata_' + i + '">' +  a.resources[i][key] + '</label></td></tr>';
                }
            }
            msg += '</table>';

            messagebox( {
                icon     : "question.png"
                ,text    : msg
                ,buttons : button_info
            });
            return "deferred";
        }
        break;
        default :
        {
            messagebox( {
                icon  : "toast.png"
                ,text  : "ga.airavata.select, unknown selectoin type '" + selecttype + "'"
            });
            return "abort";
        }
    }
}

        
    
        
/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

ga.value = {};
ga.value.settings = {};

ga.value.checkFloatIntOK = function( tag, value ) {
    var t = $( tag );
     
    if ( isNaN( value[0] ) )
    {
	t.val( t.prop( "defaultValue" ) );
	
	return false;
	
    } else {
	if (t.data('type') == "float")
	{
	    if ( value[0] < parseFloat ( t.attr( "min" ) ) )
	    { 
		
		value.splice(0, value.length)
		value.push( t.attr( "min" ) );
	    } else {
		if ( value[0] > parseFloat ( t.attr( "max" ) ) )
		{ 
		    
		    value.splice(0, value.length)
		    value.push( t.attr( "max" ) );
		} else {
		    $( tag + "_msg" ).html( "" );
		}
	    }
	}
	else
	{
	    if ( t.data('type') == "integer" )
	    {   
		if ( value[0] < parseInt ( t.attr( "min" ) ) )
		{ 
		    
		    value.splice(0, value.length)
		    value.push( t.attr( "min" ) );
		} else {
		    if ( value[0] > parseInt ( t.attr( "max" ) ) )
		    { 
			
			value.splice(0, value.length)
			value.push( t.attr( "max" ) );
		    } else {
			if ( parseInt( value[0] ) != value[0])
			{			
			    
			    var temp_int = value[0]; 
			    value.splice(0, value.length);
			    value.push( parseInt( parseFloat( temp_int ) + .5 ) );
			} else {
			    $( tag + "_msg" ).html( "" );
			}
		    }
		}
	    }
	}
    }
    return true;
}


ga.value.processInputfromFiles = function (text, mode, ids_array, mod){
    var lines = text.trim().split(/[\r\n]+/g);
    var linesContent = [];
    var cumulativeContent = 0;

    ids_array = ga.repeat.map.convert( ids_array );

    for (var i=0; i<lines.length; i++)
    {
	var line_separated = lines[i].trim().split(/\s+/);
	cumulativeContent += line_separated.length;
	linesContent.push(cumulativeContent);
    }
    
    //var elements = text.trim().split(/\s+/);
    var elements = [];
    var contrastrepel = [];
    var dissolrepel = [];
    var unitrepel_1 = [];
    var unitrepel_2 = [];
    var repeat_hash = [];
    var lineNumberErr = 0;
    
    switch (mode)
    {
    case "whitespace_formulchcontrast":
	var lines_formulchcontrast  = [];
	for (var i=0; i<lines.length; i++)
	{
	    var line_split = lines[i].split('#')[0];
	    
	    //line_split.trim();                            // simple trim does not work..
	    line_split = line_split.replace(/\s{2,}/g, ' ');
	    line_split = line_split.replace(/\t/g, ' ');
	    line_split = line_split.toString().trim().replace(/(\r\n|\n|\r)/g,"");
	    //console.log ("The line is: " + line_split);
	
	    lines_formulchcontrast.push(line_split);
	}
		
	var repeater_start_1 = parseInt(lines_formulchcontrast[1]);
	var repeater_start_2 = parseInt(lines_formulchcontrast[ 2 + repeater_start_1 ] );
	var repeater_start_3 = parseInt(lines_formulchcontrast[ 5 + repeater_start_1 + repeater_start_2 ]);
	var repeater_start_4 = parseInt(lines_formulchcontrast[ 9 + repeater_start_1 + repeater_start_2 + repeater_start_3]);

	var item;
	for (var i=0; i < lines_formulchcontrast.length; i++)
	{
	    if ( (i > 1) && (i < 2 + repeater_start_1) )
	    {
		item = lines_formulchcontrast[i].trim().split(/\s+/);
		for (var k=0; k < item.length; k++)
		{		    
		    contrastrepel.push(item[k]);
		}
		continue;
	    }
	    if ( (i > 2 + repeater_start_1) && (i < 3 + repeater_start_1 + repeater_start_2) ) 
	    {
		item = lines_formulchcontrast[i].trim().split(/\s+/);
		//for (var k=0; k < item.length; k++)
		//{		    
		//    dissolrepel.push(item[k]);
		//}
		dissolrepel.push(item[1]);
		dissolrepel.push(item[2]);
		dissolrepel.push(item[0]);
		dissolrepel.push(item[3]);
		continue;
	    }
	    if ( (i > 5 + repeater_start_1 + repeater_start_2) && (i < 6 + repeater_start_1 + repeater_start_2 + repeater_start_3) ) 
	    {
		item = lines_formulchcontrast[i].trim().split(/\s+/);
		//for (var k=0; k < item.length; k++)
		//{		    
		//    unitrepel_1.push(item[k]);
		//}
		unitrepel_1.push(item[1]);
		unitrepel_1.push(item[2]);
		unitrepel_1.push(item[0]);
		unitrepel_1.push(item[3]);
		continue;
	    }
	    if ( (i > 8 + repeater_start_1 + repeater_start_2 + repeater_start_3) && (i < 9 + repeater_start_1 + repeater_start_2 + repeater_start_3 + repeater_start_4) ) 
	    {
		item = lines_formulchcontrast[i].trim().split(/\s+/);
		//for (var k=0; k < item.length; k++)
		//{		    
		//    unitrepel_2.push(item[i]);
		//}
		unitrepel_2.push(item[1]);
		unitrepel_2.push(item[2]);
		unitrepel_2.push(item[0]);
		unitrepel_2.push(item[3]);
		continue;
	    }	    
	    //console.log ("Elements: " + lines_formulchcontrast[i]);
	    elements.push(lines_formulchcontrast[i]);
	}

	//console.log("Size of Contrast: " + contrastrepel.length);
	repeat_hash.push(contrastrepel);
	repeat_hash.push(dissolrepel);
	repeat_hash.push(unitrepel_1);
	repeat_hash.push(unitrepel_2);

	//for (var i=0; i < elements.length; i++) {
	for (var i=0; i < ids_array.length; i++) {
	    switch ( $("#" + ids_array[i]).attr("type") )
	    {
	    case "text":
		var reg = new RegExp($("#" + ids_array[i]).attr("pattern"));
		if ( !reg.test(elements[i]) )
		{
		    
		    messagebox( {
			icon : "warning.png",
			text : "Wrong format of the input file! Input value on the line #" + lineNumberErr + " is not a valid number. Options are: [Integer | Float point number | Number with exponent]. Check your input file",
			buttons : [
			    { id    : "ok",
			      label : "OK" } ]
		    });
		    return;
		}
		break;
	    case "number":
		var value = [elements[i]];
		//console.log( "Number: " +  elements[i]);
		if ( !( ga.value.checkFloatIntOK("#" + ids_array[i], value) ) )
		{
		    messagebox( {
			icon : "warning.png",
			text : "Wrong format of the input file! Input value on the line #" + lineNumberErr + " is not a valid number. Options are: [Integer | Float point number | Number with exponent]. Check your input file",
			buttons : [
			    { id    : "ok",
			      label : "OK" } ]
		    });
		    return;	
		}
		else
		{
		    elements[i] = value[0];
		    console.log( "Number is: " +  elements[i]);
		}
		break;	
	    default:
		messagebox( {
		    icon : "warning.png",
		    text : "Selected input type is currently not supported. Contact the developer",
		    buttons : [
			{ id    : "ok",
			  label : "OK" } ]
		});
		return;
		break;
	    }
	}
	break;
    case "whitespaceseparated":
    case "whitespaceseparated_reverselogic":

	elements = text.trim().split(/\s+/);
	
	

	if (elements.length == ids_array.length)
	{
	    for (var i=0; i < elements.length; i++) {
		for (var j=0; j < linesContent.length; j++)
		{
		    if ( i+1 <= linesContent[j] ){
			lineNumberErr = j + 1;
			break;
		    }
		}
		
		
		
		switch ( $("#" + ids_array[i]).attr("type") )
		{
		case "checkbox":
		    var options = "^(0|1|n|y|true|false|t|f|yes|no)$"; 
		    var reg = new RegExp(options);
		    if ( !reg.test(elements[i].toLowerCase()) )
		    {
			
			messagebox( {
			    icon : "warning.png",
			    text : "Wrong format of the input file! Checkbox input value on the line #" + lineNumberErr + " is not valid. Options are: [1 | 0 | yes | no | true | false | t | f | T | F | y | n | Y | N ]. Check your input file",
			    buttons : [
				{ id    : "ok",
				  label : "OK" } ]
			});
			return;
		    }
		    break;
		case "number":
		    var value = [elements[i]];
		    if ( !( ga.value.checkFloatIntOK("#" + ids_array[i], value) ) )
		    {
			messagebox( {
			    icon : "warning.png",
			    text : "Wrong format of the input file! Input value on the line #" + lineNumberErr + " is not a valid number. Options are: [Integer | Float point number | Number with exponent]. Check your input file",
			    buttons : [
				{ id    : "ok",
				  label : "OK" } ]
			});
			return;	
		    }
		    else
		    {
			elements[i] = value[0];
		    }
		    break;			    
		case "text":
		    var reg = new RegExp($("#" + ids_array[i]).attr("pattern"));
		    if ( !reg.test(elements[i]) )
		    {
			
			messagebox( {
			    icon : "warning.png",
			    text : "Wrong format of the input file! Input value on the line #" + lineNumberErr + " is not a valid number. Options are: [Integer | Float point number | Number with exponent]. Check your input file",
			    buttons : [
				{ id    : "ok",
				  label : "OK" } ]
			});
			return;
		    }
		    break;
		default:
		    messagebox( {
			icon : "warning.png",
			text : "Selected input type is currently not supported. Contact the developer",
			buttons : [
			    { id    : "ok",
			      label : "OK" } ]
		    });
		    return;
		    break;
		}
	    }
	}
	else
	{
	    messagebox( {
		icon : "warning.png",
		text : "Wrong format of the input file! Number of parameters is inconsistent with the model chosen. Check your parameter file",
		buttons : [
		    { id    : "ok",
		      label : "OK" } ]
	    });
	    return;
	}
	break;
    default:
	messagebox( {
	    icon : "warning.png",
	    text : "Selected file parsing mode is currently not supported. Contact the developer",
	    buttons : [
		{ id    : "ok",
		  label : "OK" } ]
	});
	return;
	break;
    }
    
    /// Filling the values form file /////////////////////////////////////////
    
    //console.log("NUMBER elements array: " + elements.length + "; #ids: " + ids_array.length);
    var repeater_counter=0;
    for (var i=0; i < elements.length; i++) {
	switch ( $("#" + ids_array[i]).attr("type") )
	{
	case "checkbox" :
	    if (mode.indexOf('reverselogic') >= 0)
	    {
		switch ( elements[i].toLowerCase() )
		{
		case "0":
		case "false":
		case "f":
		case "n":
		case "no":
		    $("#" + ids_array[i]).prop( "checked", true );
		    break;
		case "1":
		case "true":
		case "t":
		case "yes":
		case "y":
		    $("#" + ids_array[i]).prop( "checked", false ); 
		    break;
		}
	    }
	    else
	    {
		switch ( elements[i].toLowerCase() )
		{
		case "0":
		case "false":
		case "f":
		case "n":
		case "no":
		    $("#" + ids_array[i]).prop( "checked", false );
		    break;
		case "1":
		case "true":
		case "t":
		case "yes":
		case "y":
		    $("#" + ids_array[i]).prop( "checked", true ); 
		    break;		
		}
	    }
	    
	default:
	    //
	    $("#" + ids_array[i]).val(elements[i]);
	    $("#" + ids_array[i]).prop( "defaultValue", elements[i]);
	    break;
	}
	if ( $("#" + ids_array[i]).data("repeater") )
	{
	    ga.repeat.change(mod,ids_array[i]);
	    // get children
	    children = ga.repeat.children( mod, ids_array[i] );
	    var val = $("#" + ids_array[i]).val();
	    
	    var curr_repeat = 0;
	    
	    for ( j = 1; j <= val; ++j)
	    {
		for ( t in children ) 
		{
		    k = ids_array[i] + "-" + t + "-" + ( j - 1 );
		    //console.log( "child's ids: " + k + "; Child's type: " +  $("#" + k).attr("type"));
		    var repeat_value = repeat_hash[repeater_counter][curr_repeat];
		    //$("#" + k).val("Test Value");
		    $("#" + k).val(repeat_value);
		    curr_repeat++;
		}
	    }
	    ga.repeat.change(mod,ids_array[i]);
	    repeater_counter++;
	    //}
	    // break;
	}
    }
}


ga.value.input = {}

ga.value.setInputForRFile = function(module, tag, id, mode, ids) {
    ga.value.input[ module ]          = ga.value.input[ module ] || {};
    ga.value.input[ module ][id]      = {};
    ga.value.input[ module ][id].id   = id;
    ga.value.input[ module ][id].tag  = tag;
    ga.value.input[ module ][id].mode = mode;
    ga.value.input[ module ][id].ids  = ids;

}

ga.value.types = {}

ga.value.registerid = function(module, id, label, required) {
    ga.value.types[ module ]          = ga.value.types[ module ] || {};
    ga.value.types[ module ][id]      = {};
    ga.value.types[ module ][id].id   = id;
    ga.value.types[ module ][id].label = label;
    ga.value.types[ module ][id].req  = required || 0;
}


ga.value.setInputfromRFile = function(path, mode, ids, mod){ 
    var ids_array = ids.split(',');
    var username = $( '#_state' ).data('_logon');
    var actual_path = 'results/users/' + username + '/' + path;
    
    
    
    $.get(actual_path, function(text){
	
	ga.value.processInputfromFiles(text, mode, ids_array, mod);
	
    }, "text");
}


ga.value.setInputfromFile = function( tag, mode, ids, mod ) {
    $(tag).hide();
       
    var ids_array = ids.split(',');
    $(tag).change( function(e) {
	var file = $( tag )[0].files[0];
	
	//console.log ("Module from setformfile: " + mod);
	var reader = new FileReader();
	
	reader.onload = function(evt) {
            var text = evt.target.result;
	    
	    ga.value.processInputfromFiles(text, mode, ids_array, mod);
	    
	}
	reader.readAsText(file);
    })
}
		

ga.value.setLastValue = function( pkg, tag, defval ) {
    var tl = pkg + ":" + tag + ":last_value";
    var dv = pkg + ":" + tag + ":default_value";
    var t = $( tag );
    var p2d;
    if ( !/_output$/.test( pkg ) ) {
        return false;
    }

    if ( $( "#global_data" ).data( tl ) == undefined ) {
        switch( t.attr( "type" ) )
        {
            case "checkbox" :
            case "radio" :
                $( "#global_data" ).data( tl, t.is( ":checked") );
                $( "#global_data" ).data( dv, t.is( ":checked") ); break;
            case "div" : 
            case "msgs" : 
                $( "#global_data" ).data( tl, t.html() ); 
                $( "#global_data" ).data( dv, t.html() );
                break;
            case "plot2d" :


                           break;
            case "filelink" :
            case "filelinkm" :
                $( "#global_data" ).data( tl, $( tag + "_filelink" ).html() );

                break;

            default : 
                      if ( defval )
                      {

                         t.val( defval );
                      }                         

                      $( "#global_data" ).data( tl, t.val() );
                      $( "#global_data" ).data( dv, t.val() );
                      break;
        }
    } else {
        switch( t.attr( "type" ) )
        {
            case "checkbox": 
            case "radio": 
                   t.prop( "checked", $( "#global_data" ).data( tl ) ); break;
            case "div" : 
            case "msgs" : t.html( $( "#global_data" ).data( tl ) ); break;
            case "atomicstructure" : 
                  var stag = tag.replace( /^#/, "" );

                  if ( $( "#global_data" ).data( tl ) ) {

                      _jmol_info[ stag ].script = $( "#global_data" ).data( tl );

                      t.html(Jmol.getAppletHtml( "jmolApplet" + stag,  _jmol_info[ stag ] ) );

                  } else {

                      t.html("");
                  }
                  break;

            case "plot2d" : 


                     p2d = gd.data( tl );
                     if ( p2d.data ) {
                         ga.value.set.plot2d( tag, p2d.options );
                         t.plot( p2d.data, ga.value.get.plot2d.plot_options( tag, p2d.options ) );
                     } else {
                         t.plot( p2d, ga.value.get.plot2d.plot_options( tag ) );
                     }
                     break;
            case "filelink" : 
            case "filelinkm" : 
                     $( tag + "_filelink" ).html( $( "#global_data" ).data( tl ) );
                     break;
            default: 

            
            t.val( $( "#global_data" ).data( tl ) );
            break;
        }
    }
}

ga.value.saveLastValue = function( pkg, tag ) {
   var t = $( tag );

   switch( t.attr( "type" ) )
   {
       case "file" :  return; break;
       case "checkbox" :
       case "radio" :
                     $( "#global_data" ).data( pkg + ":" + tag + ":last_value", t.is( ":checked") ); break;
       case "div" :
       case "msgs" : $( "#global_data" ).data( pkg + ":" + tag + ":last_value", t.html() ); break;
       case "plot2d" : 

                       break;
       case "filelink" : 
       case "filelinkm" : 
                     $( "#global_data" ).data( pkg + ":" + tag + ":last_value", $( tag + "_filelink" ).html() ); 
                     break;
       case "atomicstructure" : 
                     var stag = tag.replace( /^#/, "" );

                     if ( _jmol_info && _jmol_info[ stag ] && _jmol_info[ stag ].length ) {

                         $( "#global_data" ).data( pkg + ":" + tag + ":last_value", _jmol_info[ stag ].script ); 
                     } else {

                         $( "#global_data" ).data( pkg + ":" + tag + ":last_value", "" ); 
                     }
                     break;
       default: $( "#global_data" ).data( pkg + ":" + tag + ":last_value", t.val() ); break;
   }


}

ga.value.saveLastValues = function( pkg ) {

   $( "#" + pkg + " :input" ).each(function() {

      ga.value.saveLastValue( pkg, "#" + $( this ).attr( "id" ) );
   });
}

ga.value.resetDefaultValue = function( pkg, tag ) {

   var t = $( tag );


   if(  t.prop( "tagName" ) == 'SELECT' ) {
    t.val( $( "#global_data" ).data( pkg + ":" + tag + ":default_value" ) );
   } else {
      switch( t.attr( "type" ) )
      {
          case "file" :  return; break;
          case "checkbox" : 
                        $( "#global_data" ).removeData( pkg + ":" + tag + ":repeat:count" );

          case "radio" : 
                        t.prop( "checked", $( "#global_data" ).data( pkg + ":" + tag + ":default_value" ) ); break;
          case "div" :
          case "msgs" : t.html( $( "#global_data" ).data( pkg + ":" + tag + ":default_value" ) ); 
                        break;
          case "filelink" :
          case "filelinkm" :
                        $( tag + "_filelink" ).html( " " );
                        break;
          case "plot2d" : 

                        $( "#global_data" ).data( pkg + ":" + tag + ":last_value", [[]] );
                        ga.value.clear.plot2d( tag );
                        t.plot( [[]], ga.value.get.plot2d.plot_options( tag ) ); break;
                        break;
          case "image" : 
          
          t.html("");
          break;
          case "video" : 
          
          t.html("");
          break;

          case "atomicstructure" : 
                        var stag = tag.replace( /^#/, "" );

                        $( "#global_data" ).data( pkg + ":" + tag + ":last_value", "" );
                        $( tag ).html("");
                        break;
          default: t.val( t.attr( "value" ) ); break;
      }
   }
   ga.value.saveLastValue( pkg, tag );
   $( tag + "_msg" ).html("");
}

ga.value.resetDefaultValues = function( pkg, msgs ) {

    var i,
    hmod_textarea;
    if ( !/_output$/.test( pkg ) ) {
        return false;
    }

    $( "#" + pkg + " :input" ).each(function() {
        ga.value.resetDefaultValue( pkg, "#" + $( this ).attr( "id" ) );
    });
    ga.sync.reset( pkg );
    for ( i in ga.value.extra_resets.data ) 
    {
        
        ga.value.resetDefaultValue( pkg, "#" + i );
    }
    if ( msgs ) {
        ga.value.resetDefaultValue( pkg, "#" + pkg + "_msgs" );
        hmod_textarea = "#" + pkg + "_textarea";
        ga.value.resetDefaultValue( pkg, hmod_textarea );
        $( hmod_textarea ).hide();
        $( hmod_textarea + "_label" ).hide();
    }
}

ga.value.extra_resets = function( id ) {

    ga.value.extra_resets.data = ga.value.extra_resets.data || {};
    ga.value.extra_resets.data[ id ] = 1;
}

ga.value.extra_resets.clear = function() {

    ga.value.extra_resets.data = {};
}
    

ga.value.setLastValueOutput = function( mod ) {

    var hmod            = "#" + mod,
        hmod_textarea   = hmod + "_textarea",
        jqhmod_textarea = $( hmod_textarea );

    ga.value.setLastValue( mod, hmod + "_msgs" );
    ga.value.setLastValue( mod, hmod_textarea );
    if ( jqhmod_textarea.val() ) {

        jqhmod_textarea.show();
        $( hmod_textarea + "_label" ).show(); 
        jqhmod_textarea.height( parseFloat( jqhmod_textarea.prop( 'scrollHeight' ) ) + 
                                parseFloat( jqhmod_textarea.css ( 'borderTopWidth' ) ) + 
                                parseFloat( jqhmod_textarea.css ( 'borderBottomWidth' ) ) );
    } else {

        jqhmod_textarea.hide();
        $( hmod_textarea + "_label" ).hide();
    }
}
    
ga.value.get = {};
ga.value.set = {};
ga.value.clear = {};

ga.value.set.plot2d = function( tag, options ) {

    var tagtitle  = tag + "_title",
        tagxlabel = tag + "_xlabel",
        tagylabel = tag + "_ylabel";





    $( tagtitle  ).html( options.title  ? options.title  : "");
    $( tagxlabel ).html( options.xlabel ? options.xlabel : "");
    $( tagylabel ).html( options.ylabel ? options.ylabel : "");
}

ga.value.clear.plot2d = function( tag ) {

    var tagtitle  = tag + "_title",
        tagxlabel = tag + "_xlabel",
        tagylabel = tag + "_ylabel";
        tagxy     = tag + "_xy";

    $( tagtitle  ).html("");
    $( tagxlabel ).html("");
    $( tagylabel ).html("");
    $( tagxy     ).html("");
}


ga.value.set.plot2d.pan = function( tag, value ) {

    ga.value.settings[ tag ] = ga.value.settings[ tag ] || {};
    ga.value.settings[ tag ].pan = value ? true : false;
}

ga.value.set.plot2d.zoom = function( tag, value, pkg ) {

    var tagtitle  = tag + "_title",
        tagxlabel = tag + "_xlabel",
        tagylabel = tag + "_ylabel";
        tagxy     = tag + "_xy";

    ga.value.settings[ tag ] = ga.value.settings[ tag ] || {};
    ga.value.settings[ tag ].zoom = value ? true : false;
    if ( value ) {
       ga.value.settings[ tag ].pkg = pkg;

       $( tag + "_title," + tag + "_xlabel," + tag + "_ylabel," + tag + "_xy" )
            .on("click", ga.value.set.plot2d.zoom.click );
    }
}

ga.value.set.plot2d.pkg = function( pkg, tag ) {


    ga.value.settings[ tag ] = ga.value.settings[ tag ] || {};
    ga.value.settings[ tag ].pkg = pkg;
    $( tag + "_title," + tag + "_xlabel," + tag + "_ylabel," + tag + "_xy" )
        .on("click", ga.value.set.plot2d.reset );
}

ga.value.set.plot2d.reset = function( event ) {
    var id = "#" + event.target.id.replace( /(_title|_xlabel|_ylabel|_xy)$/, "" );
    event.preventDefault();

    ga.value.setLastValue( ga.value.settings[ id ].pkg, id );
}

ga.value.set.plot2d.hover = function( tag, value ) {

    ga.value.settings[ tag ] = ga.value.settings[ tag ] || {};
    ga.value.settings[ tag ].hover = value ? true : false;
}

ga.value.get.plot2d = {};
ga.value.get.plot2d.plot_options = function( tag, options ) {


    var plot_options = ga.plot_options();

    plot_options.pan.interactive  = ga.value.settings[ tag ].pan   ? true : false;
    plot_options.zoom.interactive = ga.value.settings[ tag ].zoom  ? true : false;
    plot_options.grid.hoverable   = ga.value.settings[ tag ].hover ? true : false;

    if ( options ) {
        if ( options.legend ) {
            plot_options.legend           = options.legend;
            
            if ( options.legend.container ) {
                plot_options.legend.container = $( tag + "_legend" );
            }
        }
        if ( options.xmin ) {
            plot_options.xaxis.min        = options.xmin;
        }
        if ( options.xmax ) {
            plot_options.xaxis.max        = options.xmax;
        }
        if ( options.xscale ) {
            switch ( options.xscale ) {
                case "log" :
                plot_options.xaxis.transform        = function(v) { return v > 0 ? Math.log( v ) : 1e-99; };
                plot_options.xaxis.inverseTransform = function(v) { return Math.exp( v ); };
                plot_options.xaxis.tickFormatter    = ga.value.plot2d.ticformatter;
                break;
                default : 
                console.log( "ga.value.get.plot2d.plot_options( " + tag + " , options ) has unsupported xscale of " + options.xscale );
                break;
            }
        }
        if ( options.xtics ) {
            plot_options.xaxis.ticks = options.xtics;
        }
        if ( options.ymin ) {
            plot_options.yaxis.min        = options.ymin;
            
        }
        if ( options.ymax ) {
            plot_options.yaxis.max        = options.ymax;
            
        }
        if ( options.yscale ) {
            switch ( options.yscale ) {
                case "log" :
                plot_options.yaxis.transform        = function(v) { return v > 0 ? Math.log( v ) : 1e-99; };
                plot_options.yaxis.inverseTransform = function(v) { return Math.exp( v ); };
                plot_options.yaxis.tickFormatter    = ga.value.plot2d.ticformatter;
                break;
                default : 
                console.log( "ga.value.get.plot2d.plot_options( " + tag + " , options ) has unsupported yscale of " + options.yscale );
                break;
            }
        }
        if ( options.ytics ) {
            plot_options.yaxis.ticks = options.ytics;
        }
    }

    return plot_options;
}
        
ga.value.plot2d = {};
ga.value.plot2d.toFP = function( val, dec ) {
    if ( dec > 0 ) {

        return val.toFixed( dec );
    }
    if ( val.toString().length > 6 ) {

        return val.toExponential( 3 ).replace( /0+e/, 'e' ).replace( /\.e/, 'e' );
    }

    return val.toFixed( 0 );
}

ga.value.plot2d.ticformatter = function formatter(val, axis) {
    var tval;
    if ( !axis._ehb || val <= axis.min ) {

        axis._ehb       = {};
        axis._ehb.pv    = val;
        axis._ehb.min   = Math.min( axis.min, axis.max );
        axis._ehb.max   = Math.max( axis.min, axis.max );
        axis._ehb.tmin  = axis.options.transform( axis._ehb.min );
        axis._ehb.tmax  = axis.options.transform( axis._ehb.max );
        axis._ehb.tmaxr = 1 / axis._ehb.tmax;
        axis._ehb.rnge  = axis._ehb.max - axis._ehb.min;
        return ga.value.plot2d.toFP( val, axis.tickDecimals );
    }

//    if ( val >= axis.max ) {
//        return ga.value.plot2d.toFP( val, axis.tickDecimals );
//    }

    if ( !axis._ehb.snd ) {
        axis._ehb.snd = true;
        axis._ehb.sndv = val;
        axis._ehb.ptd = ( axis.options.transform( val ) - axis._ehb.tmin ) * axis._ehb.tmaxr;

        return ga.value.plot2d.toFP( val, axis.tickDecimals );
    }

    if ( !axis._ehb.tr ) {
        axis._ehb.tr  = 2 * Math.abs( (val - axis._ehb.sndv ) ) / axis._ehb.rnge;
        axis._ehb.ptd = Math.abs( axis.options.transform( val ) - axis._ehb.tmin ) * axis._ehb.tmaxr;

        return ga.value.plot2d.toFP( val, axis.tickDecimals );
    }

    tval = ( axis.options.transform( val ) - axis._ehb.tmin ) * axis._ehb.tmaxr;



    if ( Math.min( Math.abs( tval - axis._ehb.ptd ), 1 - tval ) >= axis._ehb.tr )
    {

        axis._ehb.ptd = tval;
        return ga.value.plot2d.toFP( val, axis.tickDecimals );
    }



    return "";
};
/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

ga.pull = {};

ga.pull.clearPull = function( repeater ) {
   if ( !repeater || typeof( repeater ) != "string" || repeater.length == 0 || repeater == "#__fields:repeat__" )
   {
      repeater = "";
   }

   $( "#global_data" ).data( "_pull_json"   + repeater, {} );
   $( "#global_data" ).data( "_pull_update" + repeater, {} );
   $( "#global_data" ).data( "_pull_type"   + repeater, {} );
}

ga.pull.toPull = function( pkg, tag, type, pulltag, repeater ) {

   if ( !repeater || typeof( repeater ) != "string" || repeater.length == 0 || repeater == "#__fields:repeat__" )
   {
      repeater = "";
   }

   var gd = $( "#global_data" );
   var tj = gd.data( "_pull_json"   + repeater ) || {};
   var tu = gd.data( "_pull_update" + repeater ) || {};
// for now, just set to 0
   tj[ pulltag ] = 0;
   if ( typeof( tu[ pulltag ] ) != "object" )
   {
      tu[ pulltag ] = {};
   }


   tu[ pulltag ][ tag ] = type;

   gd.data( "_pull_json"   + repeater, tj );
   gd.data( "_pull_update" + repeater, tu );


}

ga.pull.doPull = function( repeater ) {
   if ( !repeater || typeof( repeater ) != "string" || repeater.length == 0 || repeater == "#__fields:repeat__" )
   {
      repeater = "";
   }

   var gd = $( "#global_data" );
   var s = $( '#_state' );
   var l = s.data( '_logon' );
   if ( l && l.length )
   {
      var tj = gd.data( "_pull_json" + repeater );
      tj[ "_window" ] = window.name;
      tj[ '_logon' ] = l;

      if ( Object.size( tj ) > 2 )
      {

         $.getJSON( "ajax/sys_config/sys_pull.php", tj )
         .done( function( data, status, xhr ) {


            var tu = gd.data( "_pull_update" + repeater );
            $.each(data, function(k, v) {


               if ( typeof( tu[ k ] ) == "object" )
               {
                  $.each( tu[ k ], function( k2, v2 ) {

                     var t = $( k2 );
                     switch( v2 )
                     {
                        case "checkbox" : 
                         t.prop( "checked", v == "on" ); break;
                        case "text" : 
                         if( t.attr( "data-type" ) == "color" ) {
                             
                             ga.color.spectrum.val( k2, v );
                         }
                        case "email" : 
                        case "text" : 
                        case "integer" : 
                        case "float" : 
                         t.val( v ); break;
                        case "listbox" : 
                         t.empty();
// setup html for results


                         $.each( v, function( k3, v3 ) {

                           t.append($("<option></option>").attr( "value", v3 ).text( v3 ) );
                         });
                         break;
                        case "label" : 

                         t.html( v );
                         break;
                        default : 
                         console.log( "ga.pull.doPull(): not yet" );
                     }
                  });
               }
            });
         })
         .fail( function( xhr, status, errorThrown ) {

         });
      } else {

      }
   }
}
/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

ga.repeats = {};

ga.repeats.cache            = {};
ga.repeats.cache._jmol_info = {};
ga.repeats.cache.specproj   = [];

ga.repeats.save = function() {
    
    ga.repeats.cache._jmol_info = _jmol_info || {};
    ga.repeats.cache.specproj   = ga.specproj.data || [];
};

ga.repeats.restore = function() {
    
    _jmol_info = ga.repeats.cache._jmol_info;
    ga.specproj.data = ga.repeats.cache.specproj;
};
/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

ga.repeat               = {};
ga.repeat.data          = {};
ga.repeat.map           = {};

// ----------------------------------------------------------------------------------------------------------
// background
// ----------------------------------------------------------------------------------------------------------
// repeat and repeaters are identified by DOM id's of the element
// a repeat is an element that is dependent on a repeater
// a repeater is an element that has dependent repeats
// an element can be both a repeat (dependent on an element) and a repeater (has dependent repeats)
// ----------------------------------------------------------------------------------------------------------
// summary of data structures
// ----------------------------------------------------------------------------------------------------------
// ga.repeat.data[ mod ]                          : the module specific data object 
//
// ga.repeat.data[ mod ].repeat                   : repeat data object 
// ga.repeat.data[ mod ].repeat[ id ]             : repeat data object for repeat id 
// ga.repeat.data[ mod ].repeat[ id ].html        : repeat id's html
// ga.repeat.data[ mod ].repeat[ id ].htmlr       : repeat id's html modified to ease replacement
// ga.repeat.data[ mod ].repeat[ id ].eval        : repeat id's eval
// ga.repeat.data[ mod ].repeat[ id ].evalr       : repeat id's eval modified to ease replacement
// ga.repeat.data[ mod ].repeat[ id ].refid       : repeat's repeater (as registered in repeatOn)
//
// ga.repeat.data[ mod ].repeater                 : repeater data object
// ga.repeat.data[ mod ].repeater[ id ]           : repeater data object for repeater id
// ga.repeat.data[ mod ].repeater[ id ].type      : repeater type (currently, checkbox, listbox or integer)
// ga.repeat.data[ mod ].repeater[ id ].child     : repeater's children (as registered in repeatOn)
// ga.repeat.data[ mod ].repeater[ id ].choice    : repeater's listbox choice
// ga.repeat.data[ mod ].repeater[ id ].value     : repeater's last value
//
// ga.repeat.map                                  : map of original id's to DOM id's of repeats
// ----------------------------------------------------------------------------------------------------------
// summary of operations
// ----------------------------------------------------------------------------------------------------------
// ga.repeat.repeat   : register a repeat
// ga.repeat.repeater : register a repeater
// ga.repeat.repeatOn : register a repeat repeater reference
// ga.repeat.children : return all "children" ( repeats on the repeater)
// ga.repeat.change   : change value of a repeater
// ----------------------------------------------------------------------------------------------------------


// register a repeat
// equivalent of ga.repeats.registerRepeat
// initializes the repeat structure & stores the html and eval for a field and returns a placeholder

ga.repeat.repeat = function( mod, id, html, this_eval ) {
    

    ga.repeat.data[ mod ] = ga.repeat.data[ mod ] || {};
    ga.repeat.data[ mod ].repeat = ga.repeat.data[ mod ].repeat || {};
    ga.repeat.data[ mod ].repeat[ id ] = {};
    ga.repeat.data[ mod ].repeat[ id ].html = html;
    ga.repeat.data[ mod ].repeat[ id ].eval = this_eval;

    ga.repeat.map[ id ] = id;

    // fix up html & eval for easy unconfused replacement

    ga.repeat.data[ mod ].repeat[ id ].htmlr = 
        html
        .replace( /<\/label>/, "%%label%%</label>" )
        .replace( RegExp( 'id="' + id + '"' ), 'id="%%id%%"' )
        .replace( RegExp( 'name="' + id ), 'name="%%id%%' )
        .replace( RegExp( 'for="' + id + '"' ), 'for="%%id%%"' )
        .replace( RegExp( 'id="' + id + '_msg"' ), 'id="%%id%%_msg"' )
        .replace( RegExp( 'id="' + id + '_tr"' ), 'id="%%id%%_tr"' )
        .replace( RegExp( 'id="' + id + '_button"' ), 'id="%%id%%_button"' )
        .replace( RegExp( '="' + id + '_altval"', 'g' ), '="%%id%%_altval"' )
        .replace( RegExp( 'name="_selaltval_' + id + '"' ), 'name="_selaltval_%%id%%"' )
        .replace( RegExp( 'id="' + id + '-repeater"' ), 'id="%%id%%-repeater"' )
    ;    

    ga.repeat.data[ mod ].repeat[ id ].evalr = 
        this_eval 
        .replace( RegExp( '"#' + id + '"', "g" ), '"#%%id%%"' )
        .replace( RegExp( '"#' + id + ' option', "g" ), '"#%%id%% option' )
        .replace( RegExp( ':' + id + ':', "g" ), ':%%id%%:' )
        .replace( RegExp( '"#' + id + '_msg"', "g" ), '"#%%id%%_msg"' )
        .replace( RegExp( '"' + id + '"', "g" ), '"%%id%%"' )
        .replace( RegExp( '"#' + id + '_button"', "g" ), '"#%%id%%_button"' )
        .replace( RegExp( '"' + id + '_altval"', "g" ), '"%%id%%_altval"' )
        .replace( RegExp( '"#' + id + '_altval"', "g" ), '"#%%id%%_altval"' )
    ;

    
    return '<tr><td></td><td><span id="' + id + '-span"></span></td></tr>';
}

// add a repeat repeater reference
// equivalent of ga.repeats.addRepeat 
// the repeat should already exist

ga.repeat.repeatOn = function( mod, id, refid ) {
    
    var rxcolon = /^(.*):(.*)$/,
        rxcolonval = rxcolon.exec( refid ),
        refbase,
        refchoice
    ;

    refid = refid.replace( ':', '-' );

    ga.repeat.data[ mod ].repeater = ga.repeat.data[ mod ].repeater || {};
    ga.repeat.data[ mod ].repeater[ refid ] = ga.repeat.data[ mod ].repeater[ refid ] || {};
    ga.repeat.data[ mod ].repeater[ refid ].child = ga.repeat.data[ mod ].repeater[ refid ].child || [];
    ga.repeat.data[ mod ].repeater[ refid ].child.push( id );
    ga.repeat.data[ mod ].repeat[ id ].refid = refid;

    if ( rxcolonval ) {
        refbase   = rxcolonval[ 1 ];
        refchoice = rxcolonval[ 2 ];
        

        ga.repeat.data[ mod ].repeater[ refbase ] = ga.repeat.data[ mod ].repeater[ refbase ] || {};
        ga.repeat.data[ mod ].repeater[ refbase ].child = ga.repeat.data[ mod ].repeater[ refbase ].child || [];
        ga.repeat.data[ mod ].repeater[ refbase ].choice = ga.repeat.data[ mod ].repeater[ refbase ].choice || [];
        ga.repeat.data[ mod ].repeater[ refbase ].child.push( id );
        ga.repeat.data[ mod ].repeater[ refbase ].choice.push( refchoice );
    }
        
}

// add a repeater
// no exact equivalent in ga.repeats, this was encapsulated in various updateRepeats

ga.repeat.repeater = function( mod, id, type ) {
    
    ga.repeat.data[ mod ] = ga.repeat.data[ mod ] || {};
    ga.repeat.data[ mod ].repeater = ga.repeat.data[ mod ].repeater || {};
    ga.repeat.data[ mod ].repeater[ id ] = ga.repeat.data[ mod ].repeater[ id ] || {};
    ga.repeat.data[ mod ].repeater[ id ].type = type;
}

// return all children

ga.repeat.children = function( mod, id, result ) {
    var i;

    

    result = result || {};

    if ( !ga.repeat.data[ mod ] || 
         !ga.repeat.data[ mod ].repeater || 
         !ga.repeat.data[ mod ].repeater[ id ] ) {
        
        return result;
    }

    if ( !ga.repeat.data[ mod ].repeater[ id ].child ) {
        
        return result;
    }

    for ( i = 0; i < ga.repeat.data[ mod ].repeater[ id ].child.length; ++i ) {
        // for ( i in ga.repeat.data[ mod ].repeater[ id ].child ) {
        
        result[ ga.repeat.data[ mod ].repeater[ id ].child[ i ] ] = true;
        if ( ga.repeat.data[ mod ].repeater[ i ] ) {
            result = ga.repeat.children( mod, i, result );
        }
    }
    return result;
}

// change
// quasi equivalent in ga.repeats in updateRepeats{,Cb,Lb}

ga.repeat.change = function( mod, id, init ) {
    var val,
    child_repeaters = [],
    hid = "#" + id,
    jqhid = $( hid ),
    children,
    add_html = "",
    add_eval = "",
    tid,
    i,
    j,
    k;

    
    if ( !ga.repeat.data[ mod ] || 
         !ga.repeat.data[ mod ].repeater || 
         !ga.repeat.data[ mod ].repeater[ id ] ) {
        
        return false;
    }

    if ( !jqhid.length ) {
        
	//console.log("ga.repeat.change( " + mod + " , " + id + " ) id does not currently exist in DOM" );
        return false;
    }

    // get value of repeater
    switch ( ga.repeat.data[ mod ].repeater[ id ].type ) {
    case "checkbox" : 
        val = jqhid.prop( "checked" ) ? 1 : 0;
        break;
        
    case "integer" :
    case "listbox" :
        val = jqhid.val();
	console.log("Value:  " + val );
        break;

    default :
        console.warn( "ga.repeat.change( " + mod + " , " + id + " ) type " + ga.repeat.data[ mod ].repeater[ id ].type + " not supported" );
        return false;
        break;
    }

    // has the value changed ?

    if ( !init && ga.repeat.data[ mod ].repeater[ id ].value === val ) {
        
        return false;
    }
    
    

    // get children
    children = ga.repeat.children( mod, id );

    

    // build up add_html & add_eval

    switch ( ga.repeat.data[ mod ].repeater[ id ].type ) {
    case "checkbox" : 
        if ( val ) {
            for ( i in children ) {
                k = id + "-" + i;
                ga.repeat.map[ i ] = k;
                
                
                add_html += ga.repeat.data[ mod ].repeat[ i ].htmlr.replace( /%%id%%/g, k ).replace( "%%label%%", "" );
                add_eval += ga.repeat.data[ mod ].repeat[ i ].evalr.replace( /%%id%%/g, k );
                if ( ga.repeat.data[ mod ].repeater[ i ] ) {
                    
                    if ( !ga.repeat.data[ mod ].repeater[ k ] ) {
                        ga.repeat.data[ mod ].repeater[ k ] = jQuery.extend( {}, ga.repeat.data[ mod ].repeater[ i ] );
                    }
                    child_repeaters.push( k );
                    if ( ga.repeat.data[ mod ].repeater[ k ].value ) {
                        delete ga.repeat.data[ mod ].repeater[ k ].value;
                    }
                }
            }
        }
        break;

    case "integer" :

        for ( j = 1; j <= val; ++j ) {
            for ( i in children ) {
                k = id + "-" + i + "-" + ( j - 1 );
                ga.repeat.map[ i ] = k;
                
                
                add_html += ga.repeat.data[ mod ].repeat[ i ].htmlr.replace( /%%id%%/g, k ).replace( "%%label%%", "[" + j + "]" );
                add_eval += ga.repeat.data[ mod ].repeat[ i ].evalr.replace( /%%id%%/g, k );
                if ( ga.repeat.data[ mod ].repeater[ i ] ) {
                    
                    if ( !ga.repeat.data[ mod ].repeater[ k ] ) {
                        ga.repeat.data[ mod ].repeater[ k ] = jQuery.extend( {}, ga.repeat.data[ mod ].repeater[ i ] );
                    }
                    child_repeaters.push( k );
                    if ( ga.repeat.data[ mod ].repeater[ k ].value ) {
                        delete ga.repeat.data[ mod ].repeater[ k ].value;
                    }
                }
            }
        }
        break;

    case "listbox" :
        
        tid = id.replace( /-[0-9]+$/, "" ).replace( /^(.*)-([A-ZA-z0-9_]*)$/, "$2" ) + "-" + val;

        j = id + "-" + val;

        
        children = ga.repeat.children( mod, tid );
        

        for ( i in children ) {
            k = j + "-" + i;
            ga.repeat.map[ i ] = k;
            
            
            add_html += ga.repeat.data[ mod ].repeat[ i ].htmlr.replace( /%%id%%/g, k ).replace( "%%label%%", "" );
            add_eval += ga.repeat.data[ mod ].repeat[ i ].evalr.replace( /%%id%%/g, k );
            if ( ga.repeat.data[ mod ].repeater[ i ] ) {
                
                if ( !ga.repeat.data[ mod ].repeater[ k ] ) {
                    ga.repeat.data[ mod ].repeater[ k ] = jQuery.extend( {}, ga.repeat.data[ mod ].repeater[ i ] );
                }
                child_repeaters.push( k );
                if ( ga.repeat.data[ mod ].repeater[ k ].value ) {
                    delete ga.repeat.data[ mod ].repeater[ k ].value;
                }
            }
        }
        break;

    default :
        console.warn( "ga.repeat.change( " + mod + " , " + id + " ) type " + ga.repeat.data[ mod ].repeater[ id ].type + " not supported" );
        return false;
        break;
    }

    if ( !/^<tr>/.test( add_html ) &&
         /<\/tr>$/.test( add_html ) ) {
        add_html = "<tr>" + add_html;
    }

    
    
    

    $( hid + "-repeater" ).html( add_html );
    eval( add_eval );

    ga.repeat.data[ mod ].repeater[ id ].value = val;

    for ( i = 0 ; i < child_repeaters.length; ++i ) {
        
	//console.log( "ga.repeat.change( " + mod + " , " + id + " ) child_repeater " + child_repeaters[ i ] );
        ga.repeat.change( mod, child_repeaters[ i ], init );
    }

    if ( $( "#global_data" ).data( "_pull_json#" + id ) ) {
        
        ga.pull.doPull( "#" + id );
    }
    

    resetHoverHelp();
}

ga.repeat.map.convert = function( ids_array ) {
    var i,
    result = [];

    

    for ( i = 0; i < ids_array.length; ++i ) {
        result[ i ] = ga.repeat.map[ ids_array[ i ] ] || ids_array[ i ];
    }

    
    return result;
}
/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

// ga.hide provides hider functionality to hide a field based upon checkbox status, this is used primarily for the login "forgot password" to remove the password box

ga.hide = function( module, id ) {

    ga.hide.data = ga.hide.data || {};
    ga.hide.data[ module ] = ga.hide.data[ module ] || {};
    ga.hide.data[ module ][ id ] = ga.hide.data[ module ][ id ] || {};
    ga.hide.data[ module ][ id ].active = 1;


};

ga.hide.data = {};

ga.hide.update = function( module, id ) {

    var i;

    if ( !ga.hide.data[ module ] || !ga.hide.data[ module ][ id ] ) {
        console.log( "ga.hide.update( " + module + " , " + id + " ) error, hider has not been defined" );
        return;
    }

    if ( !ga.hide.data[ module ][ id ].hides ) {
        console.log( "ga.hide.update( " + module + " , " + id + " ) error, no hides attached to this hider" );
        return;
    }

    if ( $( id ).prop( 'checked' ) ) {
        for ( i in ga.hide.data[ module ][ id ].hides ) {

            $( i + "-itd" ).html(" ");
            $( i ).hide();
        } 
    } else {
        for ( i in ga.hide.data[ module ][ id ].hides ) {

            $( i + "-itd" ).html( ga.hide.data[ module ][ id ].hides[ i ] );
            $( i ).show();
        } 
    }
// fix up help
    setHoverHelp();

}

ga.hide.add = function( module, id, hiderid ) {

    ga.hide.data = ga.hide.data || {};
    ga.hide.data[ module ] = ga.hide.data[ module ] || {};
    ga.hide.data[ module ][ hiderid ] = ga.hide.data[ module ][ hiderid ] || {};
    ga.hide.data[ module ][ hiderid ].hides = ga.hide.data[ module ][ hiderid ].hides || {};
    ga.hide.data[ module ][ hiderid ].hides[ id ] = $( id + "-itd" ).html();


};

// hideifnot is helpful for removing fields if a directive is not set
// this is currently supported for types/checkbox.input, but could easily be extended by adding the fields:hideifnot tag to other input elements
// note: it also requires a registry of directives (currently done in base_header.html using ga.directives

ga.directives = function( directive, value ) {
    
    ga.directives.data = ga.directives.data || {};
    ga.directives.data[ directive ] = value;
}

ga.hideifnot = function( id, directive ) {
    
    if ( ga.directives.data &&
         ga.directives.data[ directive ] &&
         !/^(off|false|0$)/.test( ga.directives.data[ directive ].toLowerCase() ) ) {
        
        return;
    }
    $( id ).hide();
}

/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

ga.data = {};
ga.data.nofcrefresh = {};

// apply the data to the screen output, return an object with job_status

ga.data.update = function( mod, data, msging_f, msg_id ) {
    var output_msgs_cleared = 0,
        appended            = 0,
        state_changed       = 0,
        do_close            = 0,
        do_close2           = 0,
        mod_out             = mod + "_output",
        hmod_out            = "#" + mod_out,
        jqmod_out           = $( hmod_out ),
        retobj              = {},
        hmod_out_msgs       = hmod_out + "_" + "msgs",
        jqhmod_out_msgs     = $( hmod_out_msgs ),
        htag,
        jqhtag,
        savekey,
        tlink,
        thtml,
        t,
        jsmolfile,
        match;


 
 

    if ( msging_f ) {

        $( "#" + mod + "_progress" ).html( "" );
        jqhmod_out_msgs.text( "" );
    }

    $.each(data, function(k, v) {
        
        

        match = jqmod_out.find( "#" + k );
        if ( match.length )
        {
            if ( !output_msgs_cleared )
            {
                jqhmod_out_msgs.text( "" );
                output_msgs_cleared = 1;
            }
            switch ( match.attr( "type" ) )
            {
            case "plot2d" : 

                htag = "#" + k;
                if ( v.data ) {
                    ga.value.set.plot2d( htag, v.options );
                    $.plot( match, v.data, ga.value.get.plot2d.plot_options( htag, v.options ) );
                } else {
                    $.plot( match, v,  ga.value.get.plot2d.plot_options( htag ) );
                }
                    
                savekey = mod_out + ":#" + k + ":last_value";
                $( "#global_data" ).data( savekey , v ); 
                break;
            case "atomicstructure" : 
                //                               Jmol.setDocument( 0 );
                savekey = mod_out + ":#" + k + ":last_value";
                if ( v.file ) {
                    jsmolfile = v.file;
                } else {
                    jsmolfile = v;
                }
                
                _jmol_info[ k ].script =
                    'set background [' + ga.colors.background + ']; set zoomlarge false;set echo top center;echo loading ' + jsmolfile.split( '/' ).pop() + ';refresh;load "' + jsmolfile + '";';
                if ( ga.set( mod + ":jsmoladd" ) ) {
                    _jmol_info[ k ].script += ga.set( mod + ":jsmoladd" );
                }
                if ( v.script ) {
                    _jmol_info[ k ].script += ";" + v.script;
                }
                
                //                               Jmol.getApplet("jmol", _jmol_info[ k ]);

                $( "#global_data" ).data( savekey , _jmol_info[ k ].script ); 
                $("#" + k ).html(Jmol.getAppletHtml( "jmolApplet" + k, _jmol_info[ k ] ));

                break;
            case "checkbox" : 
            case "radio" : 
                match.prop( "checked", true ); 
                break;
            case "div" :  
                match.html( v );
                break;
            case "video" : 
                jqhtag = $( "#" + k );
                thtml = "<video ";
                if ( jqhtag.attr( "data-width" ) ) {
                    thtml += ' width="' +  jqhtag.attr( "data-width" ) + '"';
                }
                if ( jqhtag.attr( "data-height" ) ) {
                    thtml += ' height="' +  jqhtag.attr( "data-height" ) + '"';
                }
                thtml += ' controls>';
                thtml += '<source src="' + v +'.mp4" type="video/mp4" /><source src="' + v +'.webm" type="video/webm" />';
                thtml += '</video>';
                
                jqhtag.html( thtml );
                break;
            case "image" : 
                jqhtag = $( "#" + k );
                thtml = "<img ";
                if ( jqhtag.attr( "data-width" ) ) {
                    thtml += ' width="' +  jqhtag.attr( "data-width" ) + '"';
                }
                if ( jqhtag.attr( "data-height" ) ) {
                    thtml += ' height="' +  jqhtag.attr( "data-height" ) + '"';
                }
                thtml += ' src="' + v + '">';
                
                jqhtag.html( thtml );
                break;
            case "filelink" : 
                tlink = "<a href=\"" + v + "\" target=\"_blank\">" + v.split( '/' ).pop() + "</a>";
                savekey = mod_out + ":#" + k + ":last_value";
                $( "#global_data" ).data( savekey , tlink );
                $( "#" + k + "_filelink" ).html( tlink );
                break;
            case "filelinkm" : 
                savekey = mod_out + ":#" + k + ":last_value";
                tlink = "";
                $.each( v, function( k2, v2 ) {
                    tlink += "<a href=\"" + v2 + "\" target=\"_blank\">" + v2.split( '/' ).pop() + "</a> ";
                } );
                $( "#global_data" ).data( savekey , tlink );
                $( "#" + k + "_filelink" ).html( tlink );
                break;
            default :
                if ( $( "#global_data" ).data( "_append:" + mod_out + "_" + k ) )
                {
                    match.val( match.val() + "\n" + v );
                    match.height( parseFloat( match.prop( 'scrollHeight' ) + parseFloat( match.css("borderTopWidth") ) + parseFloat( match.css("borderBottomWidth") ) ) );
                } else {
                    match.val( v );
                }
                break;
            }
        } else {
            if ( msging_f ) {
                if ( k.charAt( 0 ) == "_" ) {
                    if ( !/^_fs_/.test( k ) || !ga.data.nofcrefresh[ mod ] ) {
                        if ( k == "_message" )
                        { 
                            messagebox( v );
                        }
                        if ( /^_getinput/.test( k ) )
                        { 
                            
                            
                            if ( k == "_getinput" ) {
                                ga.valuen.input( mod, v );
                            }
                        }
                        if ( k == "_textarea" )
                        { 
                            
                            ga.data.textarea( hmod_out, v );
                        }
                        if ( k == "_airavata" )
                        { 
                            
                            ga.data.airavata( hmod_out, v );
                        }
                        if ( k == "_status" )
                        { 
                            
                            if ( v == "complete" ) {
                                msging_f( msg_id, 0, 0 );
                            }
                        }
                    }
                } else {
                    if ( !appended )
                    {
                        jqhmod_out_msgs.append( "<p>Unexpected results:</p>" );
                        appended = 1;
                    }
                    jqhmod_out_msgs.append( "<p>" + k + " => " + v + "</p>" );
                }
            } else {
                if ( k.charAt( 0 ) == "_" ) {
                    if ( !/^_fs_/.test( k ) || !ga.data.nofcrefresh[ mod ] ) {
                        $( "#_state" ).data( k, v );
                        state_changed = 1;
                        if ( k == "_status" )
                        { 
                            
                            retobj.job_status = v;
                        }
                        if ( /^_getinput/.test( k ) )
                        { 
                            
                            
                            if ( k == "_getinput" ) {
                                ga.valuen.input( mod, v );
                            }
                        }
                        if ( k == "_textarea" )
                        { 
                            
                            ga.data.textarea( hmod_out, v );
                        }
                        if ( k == "_airavata" )
                        { 
                            
                            ga.data.airavata( hmod_out, v );
                        }
                        if ( k == "_loginverify" )
                        { 
                            
                            ga.login.verify( v );
                        }
                        if ( k == "_loginapprove" )
                        { 
                            
                            ga.login.approve( v );
                        }
                    }
                } else {
                    if ( k == "-close" )
                    {
                        do_close = 1;
                    } else {
                        if ( k == "-close2" )
                        {
                            do_close2 = 1;
                        } else {
                            if ( !appended )
                            {
                                jqhmod_out_msgs.text( "" );
                                jqhmod_out_msgs.append( "<p>Unexpected results:</p>" );
                                appended = 1;
                                output_msgs_cleared = 1;
                            }
                            jqhmod_out_msgs.append( "<p>" + k + " => " + v + "</p>" );
                        }
                    }
                }
            }
        }
    });
    ga.value.saveLastValues( mod_out );
    ga.value.saveLastValue( mod_out, hmod_out_msgs );
    $( hmod_out + '_progress' ).html( "" );
    if ( state_changed )
    {
        syncState();
    }
    if ( do_close )
    {
        closeModal();
    }
    if ( do_close2 )
    {
        closeModal2();
    }
    return retobj;
};

ga.data.textarea = function( hmod_out, v ) {
    var hmod_out_textarea   = hmod_out + "_textarea",
        jqhmod_out_textarea = $( hmod_out_textarea );
        isatend = ( jqhmod_out_textarea[0].scrollHeight - jqhmod_out_textarea[0].scrollTop === jqhmod_out_textarea[0].clientHeight );

    
    


    if ( jqhmod_out_textarea.is( ":hidden" ) ) {

        jqhmod_out_textarea.show();
        $( hmod_out_textarea + "_label" ).show(); 
    }

    if ( v.substr( 0, 10 ) == "__reset__\n" ) {
        jqhmod_out_textarea.val( v.substr( 10 ) );
    } else {
        jqhmod_out_textarea.val( jqhmod_out_textarea.val() + v );
    }
    if ( !ga.set( "textarea:rows" ) ) {

        jqhmod_out_textarea.height( parseFloat( jqhmod_out_textarea.prop( 'scrollHeight' ) ) + 
                                    parseFloat( jqhmod_out_textarea.css ( 'borderTopWidth' ) ) + 
                                    parseFloat( jqhmod_out_textarea.css ( 'borderBottomWidth' ) ) );
    } else {
        if ( !ga.data.textarea.h[ hmod_out ] ) {
            ga.data.textarea.h[ hmod_out ] = parseFloat( jqhmod_out_textarea.prop( 'clientHeight' ) ) + 
                parseFloat( jqhmod_out_textarea.css ( 'borderTopWidth' ) ) + 
                parseFloat( jqhmod_out_textarea.css ( 'borderBottomWidth' ) );
            
        } else {
            jqhmod_out_textarea.height( ga.data.textarea.h[ hmod_out ] );
            
        }
    }
    
    if ( isatend ) {
        jqhmod_out_textarea.scrollTop( jqhmod_out_textarea[0].scrollHeight );
    }
};

ga.data.textarea.h = {};
    
ga.data.airavata = function( hmod_out, v ) {
    var hmod_out_airavata   = hmod_out + "_airavata",
        jqhmod_out_airavata = $( hmod_out_airavata );


    if ( jqhmod_out_airavata.is( ":hidden" ) ) {
        jqhmod_out_airavata.show();
    }
        
    jqhmod_out_airavata.html( v );
}
/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

// create or join a sync group
ga.sync = function( pkg, mod, sync ) {
    
    var i,
    jqt = $( "#" + mod ),
    jqo;

    // does one already exist in DOM, if so, set our val to it
    if ( jqt &&
         ga.sync.data &&
         ga.sync.data[ pkg ] &&
         ga.sync.data[ pkg ][ sync ] ) {
        ga.sync.data[ pkg ][ sync ][ mod ] = true;
        for ( i in ga.sync.data[ pkg ][ sync ] ) {
            if ( i != mod ) {
                jqo = $( "#" + i );
                if ( jqo && $.isNumeric( jqo.val() ) ) {
                    
                    jqt.val( jqo.val() );
                    jqt.change();
                    return;
                }
            }
        }
        if ( ga.sync.data[ pkg ][ sync ]._lastval &&
             $.isNumeric( ga.sync.data[ pkg ][ sync ]._lastval ) )
        {
            
            jqt.val( ga.sync.data[ pkg ][ sync ]._lastval );
            jqt.change();
            return;
        }
        
        return;
    }        
    ga.sync.data = ga.sync.data || {};
    ga.sync.data[ pkg ] = ga.sync.data[ pkg ] || {};
    ga.sync.data[ pkg ][ sync ] = ga.sync.data[ pkg ][ sync ] || {};
    ga.sync.data[ pkg ][ sync ][ mod ] = true;
}

// when a value changes, also set the others in the sync group
ga.sync.change = function( pkg, mod, sync ) {
    var i,
    jqt = $( "#" + mod ),
    jqtv,
    jqo;
    

    if ( !( jqt &&
            $.isNumeric( jqt.val() ) &&
            ga.sync.data &&
            ga.sync.data[ pkg ] &&
            ga.sync.data[ pkg ][ sync ] ) ) {
        // nothing to do
        
        return;
    }
    
    ga.sync.data[ pkg ][ sync ]._lastval = jqt.val();
    for ( i in ga.sync.data[ pkg ][ sync ] ) {
        if ( i != mod ) {
            jqo = $( "#" + i );
            if ( jqo && jqo.val() != jqt.val() ) {
                
                jqo.val( jqt.val() );
                jqo.change();
            }
        }
    }
}
    
ga.sync.reset = function( pkg ) {
    var i;
    

    if ( !( ga.sync.data &&
            ga.sync.data[ pkg ] ) ) {
        
        return;
    }

    for ( i in ga.sync.data[ pkg ] ) {
        
        if ( ga.sync.data[ pkg ][ i ]._lastval ) {
            
            delete ga.sync.data[ pkg ][ i ]._lastval;
        }
        
    }
}

/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

ga.valuen = {};
ga.valuen.data = {};
ga.valuen.html = {};
ga.valuen.dflt = {};
ga.valuen.dflt.data = {};
ga.valuen.dflt.html = {};
ga.valuen.lastload = "";

// restore data to form

ga.valuen.restore = function( form, data, html ) {
    var hform = "#" + form,
        jqhform = $( hform ),
        els = jqhform.find(':input').get(),
        repeaters = {},
        repeaters_added,
        i;

    data = data || ga.valuen.data[ form ];
    html = html || ga.valuen.html[ form ];

    

    if ( !data ) {
        // console.warn( "ga.valuen.restore( " + form + " ) no data" );
        return;
    }
    // if ( !html ) {
    // // console.warn( "ga.valuen.restore( " + form + " ) no html" );
    // return;
    //}

    $( hform + " .field_msg" ).html("");

    // add repeaters repeatedly until no more unassigned repeaters exist
    
    do {
        repeaters_added = false;
        $.each(els, function() {
            var i,
            names,
            $this = $( this ),
            val,
            found
            ;

            if ( $this.attr( "data-repeater" ) &&
                 !repeaters[ this.name ] ) {
                
                repeaters[ this.name ] = true;

                if ( this.name && 
                     ( data[ this.name ] ||
                       /checkbox|radio/i.test( this.type ) )
                   ) {
                    names = data[ this.name ];
                    if( /checkbox|radio/i.test( this.type ) ) { 
                        val = $this.val();
                        found = false;
                        if ( names ) {
                            for( i = 0; i < names.length; i++ ) {
                                if( names[ i ] == val ) {
                                    found = true;
                                    break;
                                }
                            }
                        }
                        $this.prop( "checked", found );
                        
                    } else {
                        $this.val( names[ 0 ] );
                        
                    }
                    // probably need to update repeaters at this point
                    repeaters_added = true;
                    ga.repeat.change( form, this.name, true );
                    
                    els = jqhform.find(':input').get();
                    return false;  // "break" equivalent for jquery's $.each
                } else {
                    if ( !data[ this.name ] && 
                         !/checkbox|radio/i.test( this.type ) ) {
                        console.warn( "ga.valuen.restore() no data found for repeater setting value on " + this.name + " type " + this.type + " to " + names[ 0 ] );
                    }
                }
            }
        });
    } while ( repeaters_added );

    // everything else

    $.each(els, function() {
        var i,
            names,
            $this,
            val,
            found,
            typetype,
            typenames
            ;
        
        if ( this.name && 
             !repeaters[ this.name ] ) {
            $this = $( this );
            if ( ( data[ this.name ] ||
                   /checkbox|radio/i.test( this.type ) ) &&
                 !/button/i.test( this.nodeName )
               ) {
                names = data[ this.name ];
                if( /checkbox|radio/i.test( this.type ) ) { 
                    val = $this.val();
                    found = false;
                    if ( names ) {
                        for( i = 0; i < names.length; i++ ) {
                            if( names[ i ] == val ) {
                                found = true;
                                break;
                            }
                        }
                    }
                    $this.prop( "checked", found );
                    
                } else {
                    if ( this.type === "file" ) {
                        if ( names[ 0 ] ) {
                            $( "#" + this.id + "_msg" ).html( " " + names[ 0 ] + " please reload manually (programmatic setting of local files disallowed by browser security)" );
                        } else {
                            $this.val( "" );
                        }
                    } else {
                        $this.val( names[ 0 ] );
                    }
                    
                }
            } else {
                if ( /button/i.test( this.nodeName ) &&
                     ( typetype = $this.attr( "data-type" ) ) ) {
                    
                    typenames = ga.altfile.button.getnames( this.id, typetype );
                    if ( typenames ) {
                        for ( i = 0; i < typenames.length; ++i ) {
                            
                            if ( data[ typenames[ i ] ] ) {
                                
                                ga.altfile.button.addhtml( form, this.id, typetype, data[ typenames[ i ] ] );
                            }
                        }
                    }   
                }
            }    
        }
    });

    // set html

    for ( i in html ) {
        
        $( "#" + i ).html( html[ i ] );
    };
}

// restore data to form from dflts

ga.valuen.restore.dflt = function( form ) {
    return ga.valuen.restore( form, ga.valuen.dflt.data[ form ], ga.valuen.dflt.html[ form ] );
}

// save data from form and optionally store as dflt

ga.valuen.save = function( form, asdflt ) {
    var els = $( "#" + form ).find(':input').get();
        data = {},
        html = {};
    

    // ga.valuen.data[ form ] = {};
    // ga.valuen.html[ form ] = {};

    $.each( els, function() {
        var tjq = $( this ),
            namenotdisabled = this.name && !this.disabled,
            idadd = tjq.attr( "data-add" );

        
        if ( namenotdisabled ) {
            if ( this.checked
                 || /select|textarea/i.test( this.nodeName )
                 || /file|email|number|text|hidden|password/i.test( this.type )
               ) {
                if( data[ this.name ] == undefined ){
                    data[ this.name ] = [];
                }
                data[ this.name ].push( tjq.val() );
                
            }
            if ( idadd ) {
                
                if( html[ idadd ] == undefined ){
                    html[ idadd ] = [];
                }
                html[ idadd ].push( $( "#" + idadd ).html() );
            }                
        }
    });

    if ( asdflt ) {
        ga.valuen.dflt.data[ form ] = data;
        ga.valuen.dflt.html[ form ] = html;
    } else {
        ga.valuen.data[ form ] = data;
        ga.valuen.html[ form ] = html;
    }
}

// take input data and put on form

ga.valuen.input = function( form, data ) {
    
    var hform = "#" + form,
        jqhform = $( hform ),
        els = jqhform.find(':input').get(),
        repeaters = {},
        repeaters_added,
        i;

//    $.each( data, function(k, v) {
//        console.log( "ga.valuen.input() k " + k + " v " + v );
//    });

    

    if ( !data ) {
        console.warn( "ga.valuen.input( " + form + " ) no data" );
        return;
    }

    // add repeaters repeatedly until no more unassigned repeaters exist
    
    do {
        repeaters_added = false;
        $.each(els, function() {
            var i,
            names,
            $this = $( this ),
            val,
            found
            ;

            if ( $this.attr( "data-repeater" ) &&
                 !repeaters[ this.name ] ) {
                
                repeaters[ this.name ] = true;

                if ( this.name && 
                     ( data[ this.name ] ||
                       /checkbox|radio/i.test( this.type ) )
                   ) {
                    names = data[ this.name ];
                    if ( Object.prototype.toString.call(names) !== '[object Array]' ) {
                        names = [ names ];
                    }
                    if( /checkbox|radio/i.test( this.type ) ) { 
                        val = $this.val();
                        found = false;
                        if ( names ) {
                            for( i = 0; i < names.length; i++ ) {
                                if( names[ i ] == val ) {
                                    found = true;
                                    break;
                                }
                            }
                        }
                        $this.prop( "checked", found );
                        
                    } else {
                        $this.val( names[ 0 ] );
                        
                    }
                    // probably need to update repeaters at this point
                    repeaters_added = true;
                    ga.repeat.change( form, this.name, true );
                    
                    els = jqhform.find(':input').get();
                    return false;  // "break" equivalent for jquery's $.each
                } else {
                    if ( !data[ this.name ] && 
                         !/checkbox|radio/i.test( this.type ) ) {
                        console.warn( "ga.valuen.input() no data found for repeater setting value on " + this.name + " type " + this.type + " to " + names[ 0 ] );
                    }
                }
            }
        });
    } while ( repeaters_added );

    // everything else

    $.each(els, function() {
        var i,
            names,
            $this,
            val,
            found,
            typetype,
            typenames
            ;
        
        if ( this.name && 
             !repeaters[ this.name ] ) {
            $this = $( this );
            if ( ( data[ this.name ] ||
                   /checkbox|radio/i.test( this.type ) ) &&
                 !/button/i.test( this.nodeName )
               ) {
                names = data[ this.name ];
                if ( Object.prototype.toString.call(names) !== '[object Array]' ) {
                    names = [ names ];
                }
                if( /checkbox|radio/i.test( this.type ) ) { 
                    val = $this.val();
                    found = false;
                    if ( names ) {
                        for( i = 0; i < names.length; i++ ) {
                            if( names[ i ] == val ) {
                                found = true;
                                break;
                            }
                        }
                    }
                    $this.prop( "checked", found );
                    
                } else {
                    if ( this.type === "file" ) {
                        if ( names[ 0 ] ) {
                            $( "#" + this.id + "_msg" ).html( " " + names[ 0 ] + " please reload manually (programmatic setting of local files disallowed by browser security)" );
                        }
                    } else {
                        $this.val( names[ 0 ] );
                    }
                    
                }
            } else {
                if ( /button/i.test( this.nodeName ) &&
                     ( typetype = $this.attr( "data-type" ) ) ) {
                    
                    typenames      = ga.altfile.button.getnames     ( this.id, typetype );
                    typenamesinput = ga.altfile.button.getnamesinput( this.id, typetype );
                    if ( typenames ) {
                        for ( i = 0; i < typenames.length; ++i ) {
                            
                            if ( data[ typenamesinput[ i ] ] ) {
                                
                                ga.altfile.button.addhtml( form, this.id, typetype, data[ typenamesinput[ i ] ] );
                            }
                        }
                    }   
                }
            }    
        }
    });

    $.each( data, function(k, v) {
        var jqk;
        if ( /^_html_/.test( k ) ) {
            k = k.replace( /^_html_/, "" );
            if ( jqk = $( "#" + k ) ) {
                jqk.html( v );
            }
        }
//        if ( k == "_datetime" ) {
//            jqhform.prepend( "<span class='removeme'><p><i>Reattached from job submitted at " + v + " </i></p></span>" );
//        }
    });
}

ga.valuen.addhtml = function( form ) {
    var jqhform = $( "#" + form ),
        els = jqhform.find(':input').get(),
        add = "";

    

    $.each( els, function() {
        var tjq = $( this ),
            namenotdisabled = this.name && !this.disabled,
            idadd = tjq.attr( "data-add" );

        if ( namenotdisabled ) {
            if ( idadd ) {
                
                add += '<input type="hidden" name="_html_' + idadd + '" value="' +  $( "#" + idadd ).html() + '">';
            }                
        }
    });

    

    jqhform.append( add );
}

ga.valuen.reset = function() {
    ga.valuen.data = {};
    ga.valuen.html = {};
    ga.valuen.dflt = {};
    ga.valuen.dflt.data = {};
    ga.valuen.dflt.html = {};
    ga.valuen.lastload = "";
}    
/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

ga.license = function( req ) {
    var checks = req.split( ',' ),
        needs = [],
        msg,
        button_info = [],
        i;

    ;

    if ( checks.length ) {
        msg = 
            "<p>Submitting to this module requires " + 
            ( checks.length > 1 ? "approved licenses" : "an approved license" ) 
            + " for <em>" + checks.join( "</em> and <em>" ) + "</em></p>";
    }

    for ( i in checks ) {
        button_info.push( { id : checks[ i ],
                            label : checks[ i ] + " Management",
                            data : checks[ i ],
                            cb : function( data ) { return ga.altfile.button.simplecall( "license", data ); } } );
        ;
        if ( ga.license.data[ checks[ i ] ] &&
             ga.license.data[ checks[ i ] ][ 'status' ] ) {
            switch ( ga.license.data[ checks[ i ] ][ 'status' ] ) {
            case "approved" :
                ;
                break;
            case "denied" :
                ;
                msg += "<p>Your license request for <em>" + checks[ i ] + "</em> has been <strong>denied</strong>.</p>";
                needs.push( checks[ i ] );
                break;
            case "pending" :
                ;
                msg += "<p>Your license request for <em>" + checks[ i ] + "</em> is pending approval.</p>";
                needs.push( checks[ i ] );
                break;
            default :
                console.warn( "ga.license() " + checks[ i ] + " unknown status " + ga.license.data[ checks[ i ] ][ 'status' ] );
                needs.push( checks[ i ] );
                break;
            }
        } else {
            needs.push( checks[ i ] );
        }
    }

    if ( needs.length ) {

        messagebox( {
            icon  : "warning.png",
            text  : msg,
            buttons : button_info
        });
        return false;
    } else {
        return true;
    }
}

ga.license.data = {};

// get licenses for user
ga.license.get = function() {
    ;

    ga.license.data = {};

    if ( ga.license.url ) {
        ;

        $.getJSON( 
            ga.license.url,
            {
                tagmode: "any"
                ,format: "json"
                ,_window : window.name
                ,_logon : $( "#_state" ).data( "_logon" )
            } )
            .done( function( data, status, xhr ) {
                ;
                if ( data[ 'license' ] ) {
                    ga.license.data = data[ 'license' ];
                }
                if ( data[ 'restricted' ] ) {
                    ga.restricted.show( data[ 'restricted' ] );
                } else {
                    ga.restricted.hideall();
                }
                
            })
            .fail( function( xhr, status, errorThrown ) {
                ;
                console.warn( "could not get license data" );
            });
    } else {
        ;
    }
}
/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

ga.captcha = function( cb, form ) {
    var msg = "";

    

// get json of captcha and key ( mongo'd )
// assemble msg with image uuencoded
// display and on callback, verify and continue with submit

    $.ajax( { url:ga.captcha.url , data:{ _window: window.name } } ).success( function( data ) {
        
        data = $.parseJSON( data );
        
        if ( data.error ) {
            messagebox( {
                icon : "toast.png"
                ,text  : data.error
            } );
            return;
        }
            
        msg = 
            '<img src="data:image/png;base64,' + data.captcha + '">' +
            '<form id="sys_captcha">' +
            '<label for="sys_captcha_text">Verify </label>' + 
            '<input id="sys_captcha_text" class="help_link" type="text" maxlength="6" size="6" required>' +
            '<span class="help">Enter the 6 character alphanumeric code shown in the image and then press submit</span>' +
            '<input id="sys_captcha_id" type="hidden" value="' + data.id + '">' +
            '</form>'
        ;
        
        messagebox( {
            text  : msg
            ,eval  : "resetHoverHelp();$('#sys_captcha').on('keyup keypress', function(e) { var code = e.keyCode || e.which;  if (code  == 13) { e.preventDefault(); return false; }});"
            ,buttons : [
                { 
                    id    : "submit"
                    ,label : "Submit"
                    ,cb    : ga.captcha.verify
                    ,data  : { 
                        cb   : cb
                        ,data : form
                    }
                }
            ]
        } );
    }).error( function( error ) {
        messagebox( {
            icon : "toast.png"
            ,text  : "Error contacting server"
        } );
    });
}

ga.captcha.verify = function( data ) {
    
    
    

    $.ajax( { url:ga.captcha.url_verify
              ,data:{ 
                  _window  : window.name 
                  ,captcha : $( "#sys_captcha_text" ).val() 
                  ,id      : $( "#sys_captcha_id" ).val() 
              } 
            } ).success( function( vdata ) {
                
                vdata = $.parseJSON( vdata );
                
                if ( vdata.error ) {
                    messagebox( {
                        icon : "toast.png"
                        ,text  : vdata.error
                    } );
                    return;
                }
                if ( vdata.success ) {
                    data.cb( data.data );
                } else {
                    return ga.captcha( data.cb, data.data );
                }
           })
        .error( function( error ) {
            messagebox( {
                icon : "toast.png"
                ,text  : "Error contacting server"
            } );
        });
}
    
/*jslint white: true, plusplus: true*/
/* assumes: jquery > 1.11.0, jqtree >= 3.0.9, jquery-base64 */

ga.register = function( req ) {
    var checks = req.split( ',' ),
        needs = [],
        msg,
        button_info = [],
        i;

    ;

    if ( checks.length ) {
        msg = 
            "<p>Submitting to this module requires " + 
            ( checks.length > 1 ? "approved registers" : "an approved register" ) 
            + " for <em>" + checks.join( "</em> and <em>" ) + "</em></p>";
    }

    for ( i in checks ) {
        button_info.push( { id : checks[ i ],
                            label : checks[ i ] + " Management",
                            data : checks[ i ],
                            cb : function( data ) { return ga.altfile.button.simplecall( "register", data ); } } );
        ;
        if ( ga.register.data[ checks[ i ] ] &&
             ga.register.data[ checks[ i ] ][ 'status' ] ) {
            switch ( ga.register.data[ checks[ i ] ][ 'status' ] ) {
            case "approved" :
                ;
                break;
            case "denied" :
                ;
                msg += "<p>Your register request for <em>" + checks[ i ] + "</em> has been <strong>denied</strong>.</p>";
                needs.push( checks[ i ] );
                break;
            case "pending" :
                ;
                msg += "<p>Your register request for <em>" + checks[ i ] + "</em> is pending approval.</p>";
                needs.push( checks[ i ] );
                break;
            default :
                console.warn( "ga.register() " + checks[ i ] + " unknown status " + ga.register.data[ checks[ i ] ][ 'status' ] );
                needs.push( checks[ i ] );
                break;
            }
        } else {
            needs.push( checks[ i ] );
        }
    }

    if ( needs.length ) {

        messagebox( {
            icon  : "warning.png",
            text  : msg,
            buttons : button_info
        });
        return false;
    } else {
        return true;
    }
}

ga.register.data = {};

// get registers for user
ga.register.get = function() {
    ;

    ga.register.data = {};

    if ( ga.register.url ) {
        ;

        $.getJSON( 
            ga.register.url,
            {
                tagmode: "any"
                ,format: "json"
                ,_window : window.name
                ,_logon : $( "#_state" ).data( "_logon" )
            } )
            .done( function( data, status, xhr ) {
                ;
                if ( data[ 'register' ] ) {
                    ga.register.data = data[ 'register' ];
                }
                if ( data[ 'restricted' ] ) {
                    ga.restricted.show( data[ 'restricted' ] );
                } else {
                    ga.restricted.hideall();
                }
                
            })
            .fail( function( xhr, status, errorThrown ) {
                ;
                console.warn( "could not get register data" );
            });
    } else {
        ;
    }
}
