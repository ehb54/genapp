#!/usr/bin/env php
<?php

$debug = false;
$noudptext = false;

global $debug;
global $noudptext;
global $appjson;

$appconfig = "__appconfig__";
if ( NULL == ( $appjson = json_decode( file_get_contents( $appconfig ) ) ) ) {
    echo '{"error":"appconfig could not be decoded"}';
    exit;
}

if ( isset( $appjson->messaging ) &&
     isset( $appjson->messaging->udphostip ) &&
     isset( $appjson->messaging->udpport ) ) {
    $GLOBALS['udp'] = new stdClass();
    $GLOBALS['udp']->hostip = $appjson->messaging->udphostip;
    $GLOBALS['udp']->port   = $appjson->messaging->udpport;
}

function dashline() {
    echo str_repeat( "-", 80 ) . "\n";
}

function jsondump( $title, $obj ) {
    global $debug;
    if ( isset( $debug ) && $debug ) {
        echo "$title:\n";
        dashline();
        echo json_encode( $obj, JSON_PRETTY_PRINT ) . "\n";
        dashline();
    }
}

function echo_if_debug( $str ) {
    global $debug;
    if ( isset( $debug ) && $debug ) {
        echo $str;
    }
}

function sendudpmsg( $status ) {
    global $debug;
    if ( $debug ) {
        echo "sendudpmsg: $status\n";
        return;
    }

    if ( !isset( $GLOBALS['udp'] ) ) {
        return;
    }

    unset( $GLOBALS['udp']->msg[ '_textarea' ] );
    $GLOBALS['udp']->msg[ '_airavata' ] = empty( $status ) ? "" : "OpenStack: $status<hr>";

    $json_msg = json_encode( $GLOBALS[ 'udp' ]->msg );

    socket_sendto( $GLOBALS[ 'udp' ]->socket,
                   $json_msg,
                   strlen( $json_msg ),
                   0,
                   $GLOBALS[ 'udp' ]->hostip,
                   $GLOBALS[ 'udp' ]->port );
}    

function sendudptext( $text ) {
    global $debug;
    global $noudptext;

    if ( $noudptext ) {
        return;
    }

    if ( $debug ) {
        echo "sendudp: $text\n";
        return;
    }

    if ( !isset( $GLOBALS['udp'] ) ) {
        return;
    }

    unset( $GLOBALS['udp']->msg[ '_airavata' ] );
    $GLOBALS['udp']->msg[ '_textarea' ] = $text;

    $json_msg = json_encode( $GLOBALS[ 'udp' ]->msg );

    socket_sendto( $GLOBALS[ 'udp' ]->socket,
                   $json_msg,
                   strlen( $json_msg ),
                   0,
                   $GLOBALS[ 'udp' ]->hostip,
                   $GLOBALS[ 'udp' ]->port );
}    

require "openstack/os_cluster.php";
require_once "__docroot:html5__/__application__/ajax/joblog.php";

if ($argc == 3) {
    $appId = $argv[1];

    # check for defined resource

    $json_decoded = json_decode( $argv[2] );
    if ( $json_decoded == null ) {
        echo '{"error":"oscluster received malformed JSON input."}';
        exit;
    }

    jsondump( '$json_decoded', $json_decoded );
    if ( !isset( $json_decoded->numproc ) || empty( $json_decoded->numproc ) ) {
        echo '{"error":"Number of processors not defined."}';
        exit;
    }

    $GLOBALS['NP'] = $json_decoded->numproc;

    if ( !isset( $appjson->resources->oscluster->properties->ppn ) ) {
        echo '{"error":"PPNs not defined in appconfig for this flavor."}';
        exit;
    }
    
    if ( !isset( $json_decoded->_uuid ) ) {
        echo '{"error":"no _uuid defined in json input."}';
        exit;
    }
        
    $uuid = $json_decoded->_uuid;

    $GLOBALS['NC'] = ceil( $json_decoded->numproc / $appjson->resources->oscluster->properties->ppn );

    # setup up udp messaging if available

    if ( isset( $GLOBALS['udp'] ) ) {
        if ( isset( $json_decoded->_uuid ) ) {
            $GLOBALS['udp']->socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);
            $GLOBALS['udp']->msg    = Array( "_uuid"    => $json_decoded->_uuid );
        } else {
            unset( $GLOBALS['udp'] );
        }
    }

    // startup cluster, run job, shutdown cluster
    // error_log( "globals:\n" . print_r( $GLOBALS, true ) . "\n", 3, "oscluster.log" );
    // sendudptext( "globals:\n" . print_r( $GLOBALS, true ) . "\n" );

    $json_decoded->_clusternodecount = $GLOBALS[ "NC" ];
    $json_decoded->_clusterppn = $appjson->resources->oscluster->properties->ppn;

    sendudptext( "json:\n" . json_encode( $json_decoded, JSON_PRETTY_PRINT ) . "\n" );

# -------------------- create virtual cluster, get ip's --------------------

    logrunningresource( $json_decoded->_uuid, "openstack", $GLOBALS[ "NC" ] );

    sendudpmsg( "Creating virtual cluster" );

    $result = isset( $json_decoded->_xsedeproject ) ? os_cluster_start( $GLOBALS[ "NC" ], $uuid, $json_decoded->_xsedeproject ) : os_cluster_start( $GLOBALS[ "NC" ], $uuid );
        
    $result_json = json_decode( $result );

    sendudptext( $result );

    if ( isset( $result_json->error ) ) {
        echo $result;
        exit;
    }
    sendudptext( json_encode( $result_json, JSON_PRETTY_PRINT ) );

    $json_decoded->_clusterips = $result_json->clusterips;
    $json_decoded->_clusteripsjoined = implode( ",", $result_json->clusterips );

    $json_decoded->_clusterhostfile = "hostfile-$uuid.txt";
    $tmp_slots = " slots=" . $appjson->resources->oscluster->properties->ppn;
    $hostfiletext = implode( "$tmp_slots\n", $result_json->clusterips ) . "$tmp_slots\n";
    ob_start();
    file_put_contents( $json_decoded->_clusterhostfile, $hostfiletext );
    ob_end_clean();

    sendudptext( "json with clusters:\n" . json_encode( $json_decoded, JSON_PRETTY_PRINT ) . "\n" );
    sendudptext( "hostfiletext:\n$hostfiletext\n" );

# -------------------- run job on 1st node of virtual cluster --------------------

    sendudpmsg( "Running job" );

    $json_decoded->_base_directory = str_replace( "__docroot:html5__/__application__", "__docrootactual:html5__", $json_decoded->_base_directory );
    $json_decoded->_log_directory  = str_replace( "__docroot:html5__/__application__", "__docrootactual:html5__", $json_decoded->_log_directory );
    $json_decoded->_osroot         = "__docrootactual:html5__";

    $cmd = 
        "ssh " 
        . $result_json->clusterips[0] 
        . " \"cd " 
        . $json_decoded->_base_directory
        . "; __executable_path:html5__/$appId '" 
        . str_replace( '"', '\"', json_encode( $json_decoded ) ) 
        . "'\""
        . ' 2> '
        . $json_decoded->_log_directory
        . "/_os_stderr_$uuid"
        ;
    
    sendudptext( "$cmd\n" );

    ob_start();
    file_put_contents( $json_decoded->_log_directory . "/_oscmd_$uuid", $cmd );
    ob_end_clean();

    $results = `$cmd`;
    
#    sendudptext( "results - pre replace:\n" . $results );

    if ( empty( $results ) &&
         file_exists( $json_decoded->_log_directory . "/_os_stderr_$uuid" ) &&
         filesize( $json_decoded->_log_directory . "/_os_stderr_$uuid" ) != 0 
        ) {
        $tmp_results = [];
        $tmp_results[ "error" ] = file_get_contents( $json_decoded->_log_directory . "/_os_stderr_$uuid" );
        $results = json_encode( $tmp_results );
    }

    $results = str_replace( "__docrootactual:html5__", "__docroot:html5__/__application__", $results );

    sendudptext( "results - post replace:\n" . $results );

    $cmd = "";
    foreach ( $result_json->clusterips as $ip ) {
        $cmd .= "ssh root@$ip 'sync; sudo umount /opt' &\n";
    }
    $cmd .= "wait\n";
    sendudptext( $cmd );
    $syncres = `$cmd 2>&1`;
    sendudptext( $syncres );

# -------------------- remove virtual cluster --------------------
    sendudpmsg( "Remove virtual cluster" );

    isset( $json_decoded->_xsedeproject ) ? os_delete( $GLOBALS[ "NC" ], $uuid, $json_decoded->_xsedeproject ) : os_delete( $GLOBALS[ "NC" ] );

    sendudpmsg( "" );

    echo $results;
} else {
    echo  "{\"error\":\"insufficient arguments\"}";
}
    
?>
