#!/usr/bin/perl

# genappconfig
# $debug++;
my $gb   = $ENV{ "GENAPP" } || die "$0: environment variable GENAPP must be set\n";

$notes = "usage: $0
Checks local directory's directives.json
if it contains target language html5 or if there exists an appconfig.json
merge global config.json settings into appconfig.json or create new
";

print "perl version is $]\n" if $debug;
print "command is: $0 @ARGV\n" if $debug;

if ( $] < 5.018 ) {
    if ( -e "$gb/perl/bin/perl" ) {
        $pv =`$gb/perl/bin/perl -e 'print \$];'`;
        if ( $pv >= 5.018 ) {
            print "will run new version\n" if $debug;
            unshift @ARGV, $0;
            exec( "$gb/perl/bin/perl", @ARGV );
        } else {
            die "$gb/perl/bin/perl exists, but not a correct version of perl (needs a minimum of 5.18)\n";
        }
    } else {
        die "you need to install a version of perl >= 5.18 in $gb/perl\n
there is a script $gb/sbin/install-perl-stable to do this";
    }
}

require "$gb/etc/perl/genapp_util.pl";

# -- read directives.json

my $directivesfile = "directives.json";

{
    my $f = $directivesfile;
    if ( -e $f ) {
        print "reading $f\n" if $debug;
        open my $fh, $f || die "$0: can not open $f\n";
        my @ol = <$fh>;
        close $fh;
        my @l = grep !/^\s*#/ , @ol;
            my $l = join '', @l;
        eval {
            $dirjson = decode_json( $l );
            1;
        } || do {
            my $e = $@;
            
            # figure out line #

            my ( $cp ) = $e =~ /at character offset (\d+) /;
            my $i;
            my $cpos = $cp;
            for ( $i = 0; $i < @ol; ++$i ) {
                next if $ol[ $i ] =~ /^\s*#/;
                    $cpos -= length( $ol[ $i ] );
                last if $cpos < 0;
            }

            my $sline = $i - 2;
            my $eline = $i + 2;
            $sline = 0 if $sline < 0;
            $eline = @ol - 1 if $eline >= @ol;

            print "JSON Error in file $f near these lines:\n";
            for ( my $j = $sline; $j <= $eline; ++$j ) {
                my $uj = $j + 1;
                print "$uj: $ol[$j]";
                print "$uj: " .'^'x(length($ol[$j])) . "\n" if $j == $i;
            }
            die;
        };
    } else {
        die "$0: no $f found in current directory\n";
    }
}

my $needsappconfig;
my $hasappconfig;

if ( $$dirjson{ "languages" } ) {
    foreach my $k ( @{$$dirjson{ "languages" }} ) {
        if ( $k eq "html5" ) {
            $needsappconfig++;
        }
    }
}

if ( -e "appconfig.json" ) {
    $needsappconfig++;
    $hasappconfig++;
}

if ( !$needsappconfig ) {
    print "no appconfig needed\n" if $debug;
    exit;
}

#--- get config.json info

my $cfgjson = {};
my $cfgjsonf = "$gb/etc/config.json";
my $cfgjsonnotes = '-'x80 . "\n
$cfgjsonf contains global system information.
this is used to setup individual applications values.
to build a default config.json file
$gb/sbin/setconfig.pl -pj
and verify the information is correct.
Particularly, if the machine is not publically exposed, you probably want to change the hostip and hostname, as it will likely report the public ip of your firewall.
The full options are listed by
$gb/sbin/setconfig.pl -h
You can also manually edit $cfgjsonf

Once you are satisified that the setting are correct 
you can rerun $0
" . '-'x80 . "\n"
;

{
    my $f = $cfgjsonf;
    if ( -e $f ) {
        print "reading $f\n" if $debug;
        open my $fh, $f || die "$0: can not open $f\n";
        my @ol = <$fh>;
        close $fh;
        my @l = grep !/^\s*#/ , @ol;
            my $l = join '', @l;
        eval {
            $cfgjson = decode_json( $l );
            1;
        } || do {
            my $e = $@;
            
            # figure out line #

            my ( $cp ) = $e =~ /at character offset (\d+) /;
            my $i;
            my $cpos = $cp;
            for ( $i = 0; $i < @ol; ++$i ) {
                next if $ol[ $i ] =~ /^\s*#/;
                    $cpos -= length( $ol[ $i ] );
                last if $cpos < 0;
            }

            my $sline = $i - 2;
            my $eline = $i + 2;
            $sline = 0 if $sline < 0;
            $eline = @ol - 1 if $eline >= @ol;

            print "JSON Error in file $f near these lines:\n";
            for ( my $j = $sline; $j <= $eline; ++$j ) {
                my $uj = $j + 1;
                print "$uj: $ol[$j]";
                print "$uj: " .'^'x(length($ol[$j])) . "\n" if $j == $i;
            }
            die;
        };
    } else {
        my $res = `$gb/sbin/setconfig.pl -pj`;
        print "$0 : 
" . '-'x80 . "
please verify these settings are correct
" . '-'x80 . "
$res
$cfgjsonnotes
";
        exit;
    }
}

#--- get appconfig.json

$appconfigfile = "appconfig.json";

$appjson = {};

{
    my $f = $appconfigfile;
    if ( -e $f ) {
        print "reading $f\n" if $debug;
        open my $fh, $f || die "$0: can not open $f\n";
        my @ol = <$fh>;
        close $fh;
        my @l = grep !/^\s*#/ , @ol;
            my $l = join '', @l;
        eval {
            $appjson = decode_json( $l );
            1;
        } || do {
            my $e = $@;
            
            # figure out line #

            my ( $cp ) = $e =~ /at character offset (\d+) /;
            my $i;
            my $cpos = $cp;
            for ( $i = 0; $i < @ol; ++$i ) {
                next if $ol[ $i ] =~ /^\s*#/;
                    $cpos -= length( $ol[ $i ] );
                last if $cpos < 0;
            }

            my $sline = $i - 2;
            my $eline = $i + 2;
            $sline = 0 if $sline < 0;
            $eline = @ol - 1 if $eline >= @ol;

            print "JSON Error in file $f near these lines:\n";
            for ( my $j = $sline; $j <= $eline; ++$j ) {
                my $uj = $j + 1;
                print "$uj: $ol[$j]";
                print "$uj: " .'^'x(length($ol[$j])) . "\n" if $j == $i;
            }
            die;
        };
    }
}

# sets up the app's appconfig.json:

sub setappconfig {
    my $targetdir  = $_[0];
    my $admin      = $_[1];

    my $json = {};
    $$json{ "hostip"   } = $$cfgjson{ 'hostip' }   || die "$0 hostip not defined in $cfgjsonf. $cfgjsonnotes";
    $$json{ "hostname" } = $$cfgjson{ 'hostname' } || die "$0 hostname not defined in $cfgjsonf. $cfgjsonnotes";

    $$json{ "messaging" }{ "wsport" }    = $$cfgjson{ "messaging" }{ "wsport" } || die "$0 wsport not defined in $cfgjsonf. $cfgjsonnotes";
    $$json{ "messaging" }{ "wssport" }   = $$cfgjson{ "messaging" }{ "wssport" } || die "$0 wssport not defined in $cfgjsonf. $cfgjsonnotes";
    $$json{ "messaging" }{ "zmqhostip" } = $$cfgjson{ "messaging" }{ "zmqhostip" } || die "$0 zmqhostip not defined in $cfgjsonf. $cfgjsonnotes";
    $$json{ "messaging" }{ "zmqport" }   = $$cfgjson{ "messaging" }{ "zmqport" } || die "$0 zmqport not defined in $cfgjsonf. $cfgjsonnotes";
    $$json{ "messaging" }{ "udphostip" } = $$cfgjson{ "messaging" }{ "udphostip" } || die "$0 udphostip not defined in $cfgjsonf. $cfgjsonnotes";
    $$json{ "messaging" }{ "udpport" }   = $$cfgjson{ "messaging" }{ "udpport" } || die "$0 udpport not defined in $cfgjsonf. $cfgjsonnotes";
    $$json{ "messaging" }{ "tcphostip" } = $$cfgjson{ "messaging" }{ "tcphostip" } || die "$0 tcphostip not defined in $cfgjsonf. $cfgjsonnotes";
    $$json{ "messaging" }{ "tcpport" }   = $$cfgjson{ "messaging" }{ "tcpport" } || die "$0 tcpport not defined in $cfgjsonf. $cfgjsonnotes";

    $$json{ "restricted" }{ "admin" } = ( $admin ) if $admin;

    $$json{ "resources" }{ "local" } = "";

    $$json{ "resourcedefault" } = "local";
    $$json{ "submitpolicy" } = "login";

    $$json{ "lockdir" } = "$gb/etc";

    $f = "$targetdir/appconfig.json";
    open  $fh, ">$f" || die "$0: could not open $f for writing\n";
    {
        my $js = JSON->new;
        print $fh $js->pretty->encode( $json );
    }
    close $fh;
    print "created $f\n";
}

my $cwd = `pwd`;
chomp $cwd;

if ( !$hasappconfig ) {
    setappconfig( $cwd );
    exit;
} 

# merge relevant info

{
    my $changes;

    die "$0 hostip not defined in $cfgjsonf. $cfgjsonnotes" if !$$cfgjson{ 'hostip' };
    if ( $$appjson{ 'hostip' } ne $$cfgjson{ 'hostip' } ) {
        $changes .= "hostip updated from [$$appjson{'hostip'}] to [$$cfgjson{'hostip'}]\n";
        $$appjson{ 'hostip' } = $$cfgjson{ 'hostip' };
    }

    die "$0 hostname not defined in $cfgjsonf. $cfgjsonnotes" if !$$cfgjson{ 'hostname' };
    if ( $$appjson{ 'hostname' } ne $$cfgjson{ 'hostname' } ) {
        $changes .= "hostname updated from [$$appjson{'hostname'}] to [$$cfgjson{'hostname'}]\n";
        $$appjson{ "hostname" } = $$cfgjson{ 'hostname' };
    }
        
    die "$0 wsport not defined in $cfgjsonf. $cfgjsonnotes" if !$$cfgjson{ 'messaging' }{ 'wsport' };
    if ( $$appjson{ 'messaging' }{ 'wsport' } ne $$cfgjson{ 'messaging' }{ 'wsport' } ) {
        $changes .= "messaging:wsport updated from [$$appjson{'messaging'}{'wsport'}] to [$$cfgjson{'messaging'}{'wsport'}]\n";
        $$appjson{ 'messaging' }{ 'wsport' } = $$cfgjson{ 'messaging' }{ 'wsport' };
    }

    die "$0 wssport not defined in $cfgjsonf. $cfgjsonnotes" if !$$cfgjson{ 'messaging' }{ 'wssport' };
    if ( $$appjson{ 'messaging' }{ 'wssport' } ne $$cfgjson{ 'messaging' }{ 'wssport' } ) {
        $changes .= "messaging:wssport updated from [$$appjson{'messaging'}{'wssport'}] to [$$cfgjson{'messaging'}{'wssport'}]\n";
        $$appjson{ 'messaging' }{ 'wssport' } = $$cfgjson{ 'messaging' }{ 'wssport' };
    }

    die "$0 zmqhostip not defined in $cfgjsonf. $cfgjsonnotes" if !$$cfgjson{ 'messaging' }{ 'zmqhostip' };
    if ( $$appjson{ 'messaging' }{ 'zmqhostip' } ne $$cfgjson{ 'messaging' }{ 'zmqhostip' } ) {
        $changes .= "messaging:zmqhostip updated from [$$appjson{'messaging'}{'zmqhostip'}] to [$$cfgjson{'messaging'}{'zmqhostip'}]\n";
        $$appjson{ 'messaging' }{ 'zmqhostip' } = $$cfgjson{ 'messaging' }{ 'zmqhostip' };
    }

    die "$0 zmqport not defined in $cfgjsonf. $cfgjsonnotes" if !$$cfgjson{ 'messaging' }{ 'zmqport' };
    if ( $$appjson{ 'messaging' }{ 'zmqport' } ne $$cfgjson{ 'messaging' }{ 'zmqport' } ) {
        $changes .= "messaging:zmqport updated from [$$appjson{'messaging'}{'zmqport'}] to [$$cfgjson{'messaging'}{'zmqport'}]\n";
        $$appjson{ 'messaging' }{ 'zmqport' } = $$cfgjson{ 'messaging' }{ 'zmqport' };
    }

    die "$0 udphostip not defined in $cfgjsonf. $cfgjsonnotes" if !$$cfgjson{ 'messaging' }{ 'udphostip' };
    if ( $$appjson{ 'messaging' }{ 'udphostip' } ne $$cfgjson{ 'messaging' }{ 'udphostip' } ) {
        $changes .= "messaging:udphostip updated from [$$appjson{'messaging'}{'udphostip'}] to [$$cfgjson{'messaging'}{'udphostip'}]\n";
        $$appjson{ 'messaging' }{ 'udphostip' } = $$cfgjson{ 'messaging' }{ 'udphostip' };
    }

    die "$0 udpport not defined in $cfgjsonf. $cfgjsonnotes" if !$$cfgjson{ 'messaging' }{ 'udpport' };
    if ( $$appjson{ 'messaging' }{ 'udpport' } ne $$cfgjson{ 'messaging' }{ 'udpport' } ) {
        $changes .= "messaging:udpport updated from [$$appjson{'messaging'}{'udpport'}] to [$$cfgjson{'messaging'}{'udpport'}]\n";
        $$appjson{ 'messaging' }{ 'udpport' } = $$cfgjson{ 'messaging' }{ 'udpport' };
    }

    die "$0 tcphostip not defined in $cfgjsonf. $cfgjsonnotes" if !$$cfgjson{ 'messaging' }{ 'tcphostip' };
    if ( $$appjson{ 'messaging' }{ 'tcphostip' } ne $$cfgjson{ 'messaging' }{ 'tcphostip' } ) {
        $changes .= "messaging:tcphostip updated from [$$appjson{'messaging'}{'tcphostip'}] to [$$cfgjson{'messaging'}{'tcphostip'}]\n";
        $$appjson{ 'messaging' }{ 'tcphostip' } = $$cfgjson{ 'messaging' }{ 'tcphostip' };
    }

    die "$0 tcpport not defined in $cfgjsonf. $cfgjsonnotes" if !$$cfgjson{ 'messaging' }{ 'tcpport' };
    if ( $$appjson{ 'messaging' }{ 'tcpport' } ne $$cfgjson{ 'messaging' }{ 'tcpport' } ) {
        $changes .= "messaging:tcpport updated from [$$appjson{'messaging'}{'tcpport'}] to [$$cfgjson{'messaging'}{'tcpport'}]\n";
        $$appjson{ 'messaging' }{ 'tcpport' } = $$cfgjson{ 'messaging' }{ 'tcpport' };
    }

    if ( $changes ) {
        
        $f = "$cwd/appconfig.json";
        open  $fh, ">$f" || die "$0: could not open $f for writing\n";
        {
            my $js = JSON->new;
            print $fh $js->pretty->encode( $appjson );
        }
        close $fh;
        print '-'x( length( "updated $f" ) + 10 ) . "\n";
        print "updated $f\n";
        print $changes;
        print '-'x( length( "updated $f" ) + 10 ) . "\n";
    } else {
        print "no differences\n" if $debug;
    }
}


